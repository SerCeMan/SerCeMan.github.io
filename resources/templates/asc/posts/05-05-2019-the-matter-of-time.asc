{:title "The matter of time()"
 :layout :post
 :tags  ["time"]
 :toc false
}

:sourcedir: src/posts/time
:toc: macro

Hi!

As software developers, each of us relies on the notion of time: a crucial concept in ensuring that events in our programs follow a chronological order. Yet, invoking a simple call to “get the current time” can potentially yield unexpected results and lead to unforeseen consequences if not used correctly. Moreover, the invariants about time we observe on our local development machine may not necessarily hold in the cloud, or in any distributed system. In this article, I’ll go through the different ways we can obtain the current time in our programs, and present cases where our intuitions and expectations of time from these clocks may mislead us, at best, and cause unintended errors at best or catastrophic failures, at worst.

[.text-center]
image:/img/time/time_1.png[]
[.text-center]
[quote, Untitled (Clock), 2014]
____
What would be the biological reality of planet earth rotating once every eighteen hours instead of twenty-four? You have less time, but you have more days in the year. So there’s a sense of losing something, and also gaining something. With an 18-hour clock there’s a lot more yesterdays.
____

WARNING: This article is illustrated with the examples of code in J4
ava. However, most of the information described in this article is applicable to any language or runtime.

=== Your local clocks


Before we start, let me ask you six questions. Here's a set of code snippets, is it possible that the arguments of `isThisPossible` are true?

.[[aq1]]1. Is this possible?
[source,java]
----
long t1 = System.currentTimeMillis();
long t2 = System.currentTimeMillis();

isThisPossible(t2 - t1 == 0);
----
++++
<div class="btn-group btn-group-toggle btn-group-justified" data-toggle="buttons">
  <label class="btn btn-success">
    <input type="radio" name="q1" id="yes" autocomplete="off" value="yes">Yes
  </label>
  <label class="btn btn-danger">
    <input type="radio" name="q1" id="no" autocomplete="off" value="no">No
  </label>
</div>
<br/>
++++

.[[aq2]]2. Is this possible?
[source,java]
----
long t1 = System.nanoTime();
long t2 = System.nanoTime();

isThisPossible(t2 - t1 == 0);
----
++++
<div class="btn-group btn-group-toggle btn-group-justified" data-toggle="buttons">
  <label class="btn btn-success">
    <input type="radio" name="q2" id="yes" autocomplete="off" value="yes">Yes
  </label>
  <label class="btn btn-danger">
    <input type="radio" name="q2" id="no" autocomplete="off" value="no">No
  </label>
</div>
<br/>
++++

.[[aq3]]3. Is this possible?
[source,java]
----
long t1 = System.currentTimeMillis();
long t2 = System.currentTimeMillis();

isThisPossible(t2 < t1);
----
++++
<div class="btn-group btn-group-toggle btn-group-justified" data-toggle="buttons">
  <label class="btn btn-success">
    <input type="radio" name="q3" id="yes" autocomplete="off" value="yes">Yes
  </label>
  <label class="btn btn-danger">
    <input type="radio" name="q3" id="no" autocomplete="off" value="no">No
  </label>
</div>
<br/>
++++

.[[aq4]]4. Is this possible?
[source,java]
----
long t1 = System.nanoTime();
long t2 = System.nanoTime();

isThisPossible(t2 < t1);
----
++++
<div class="btn-group btn-group-toggle btn-group-justified" data-toggle="buttons">
  <label class="btn btn-success">
    <input type="radio" name="q4" id="yes" autocomplete="off" value="yes">Yes
  </label>
  <label class="btn btn-danger">
    <input type="radio" name="q4" id="no" autocomplete="off" value="no">No
  </label>
</div>
<br/>
++++

.[[aq5]]5. Is this possible?
[source,java]
----
long t1 = System.currentTimeMillis();

isThisPossible(t1 < 0);
----
++++
<div class="btn-group btn-group-toggle btn-group-justified" data-toggle="buttons">
  <label class="btn btn-success">
    <input type="radio" name="q5" id="yes" autocomplete="off" value="yes">Yes
  </label>
  <label class="btn btn-danger">
    <input type="radio" name="q5" id="no" autocomplete="off" value="no">No
  </label>
</div>
<br/>
++++

.[[aq6]]6. Is this possible?
[source,java]
----
long t1 = System.nanoTime();

isThisPossible(t1 < 0);
----
++++
<div class="btn-group btn-group-toggle btn-group-justified" data-toggle="buttons">
  <label class="btn btn-success">
    <input type="radio" name="q6" id="yes" autocomplete="off" value="yes">Yes
  </label>
  <label class="btn btn-danger">
    <input type="radio" name="q6" id="no" autocomplete="off" value="no">No
  </label>
</div>
<br/>
++++


++++
<button id="checkquizres" class="btn btn-default btn-group-justified" type="button" data-toggle="collapse" data-target="#collapseExample" aria-expanded="false" aria-controls="collapseExample">
  Check results
</button>
<div class="collapse" id="collapseExample">
  <script>
  var answer = function(i, m1, m2) {
      var m = {
        'yes': m1,
        'no': m2,
        undefined: "Wasn't answered"
      }[$('input[name=q' + i + ']:checked').val()]
      $('#sqr' + i).text(i + ') ' + m)
  }
  document.addEventListener('DOMContentLoaded', function(){
    $('#checkquizres').on('click', function () {
      answer(1,
        "Yes, it's definitely possible",
        "Actually, It is possible"
      )
      answer(2,
        "Yes, it's possible, but it depends on underlying the system",
        "Actually, it is possible but it depends on the underlying system"
      )
      answer(3,
        "Yes, it's possible",
        "No, it is possible"
      )
      answer(4,
        "Yes, it's possible but almost imporssible to reproduce and it depends on the underlying system",
        "It is possible but almost imporssible to reproduce and it depends on the underlying system"
      )
      answer(5,
        "No, it's not possible, at least something is not possible",
        "Spot on, it's not possible!"
      )
      answer(6,
        "It is possible according to the documentation",
        "No, it is possible according to the documentation"
      )
    })
  })
  </script>
  <div id="showquizres" class="well">
    <p id="sqr1"></p>
    <p id="sqr2"></p>
    <p id="sqr3"></p>
    <p id="sqr4"></p>
    <p id="sqr5"></p>
    <p id="sqr6"></p>
  </div>
</div>
<br/>
<br/>
++++
Was the result surprising? The next section of the article will explain why certain behaviour can or can not be observed.

But why do we even care? Very often we don't, but the places of the code where the logic relies on the timestamps are typically critical pieces of the infrastructure code where correctness is a must. False assumptions in these parts of the code can lead to huge incidents, for instance this happened to link:https://blog.cloudflare.com/how-and-why-the-leap-second-affected-cloudflare-dns/[Cloudflare in 2017], where the root cause "was the belief that time cannot go backwards". It doesn't mean that Cloudflare is the only company suffered from such beliefs, but it's one of the few companies that openly publishes incident reports so that we all can learn.

To understand why certain clocks behave in a certain way, we first need to understand what properties different clocks can give us.

==== Monotonicity

Monotonically increasing function means that every next invocation of this function produces a value that's never smaller than any of the previous values. So, a monotonic clock is a clock that never goes backwards. Sadly, even though it's might be counter-intuitive at the beginning, this property is often not true for many clocks.

==== Resolution
Resolution is the smallest observable difference between two clock ticks. The resolution of a simple mechanic watch with a second hand is one second. When you’re staring at the watch, the meaningful watch hand position can be at 12 seconds or 13 seconds, but never 12 and a half.

==== Latency
Very often latency is overlooked when we’re talking about the clocks, but it’s quite important when we’re considering resolution. For instance, it doesn't matter if you have the most precise atomic watch on your hand with a picosecond resolution - if I ask you what time it is and it takes you roughly a second to take a look and respond, all of this precision fades away.

So, what properties do the java clocks have, and how do they apply to the questions at the beginning?

=== The clocks on the wall
Let’s start with `System.currentTimeMillis()`. The best place to start the exploration is to take a look at what’s written in the javadoc, and there is quite a lot of information there, here is the exempt of what is important for us right now.

.link:http://hg.openjdk.java.net/jdk/jdk11/file/1ddf9a99e4ad/src/java.base/share/classes/java/lang/System.java#l375[Javadoc]
[source,java]
----
/**
 * Returns the current time in milliseconds. Note that
 * while the unit of time of the return value is a millisecond,
 * the granularity of the value depends on the underlying
 * operating system and may be larger.  For example, many
 * operating systems measure time in units of tens of
 * milliseconds.
 *
 * ...
 *
 * @return  the difference, measured in milliseconds, between
 *          the current time and midnight, January 1, 1970 UTC.
 */
public static native long currentTimeMillis();
----

As we can see, the clock provides a value with millisecond precision but the actual resolution depends on the operating system. Moreover, if we measure the latency by measuring the execution time, it will be way below 1 millisecond, so it's not a surprise that the answer to the <<aq1,first question>> was yes.

But can it go backwards? The javadoc doesn’t mention anything about monotonicity, so we need to dig deeper, and take a look at the implementation.

WARNING: This article only explores the native implementation for Linux and MacOS. However, the similar techniques can be applied to any other operating system as well.

The method is native, so the implementation depends on the underlying OS. The native implementation for Linux and MacOS look very similar.


.link:http://hg.openjdk.java.net/jdk/jdk11/file/1ddf9a99e4ad/src/hotspot/os/linux/os_linux.cpp#l1204[Linux]
[source,cpp]
----
jlong os::javaTimeMillis() {
  timeval time;
  int status = gettimeofday(&time, NULL);
  assert(status != -1, "linux error");
  return jlong(time.tv_sec) * 1000  +  jlong(time.tv_usec / 1000);
}
----

.link:http://hg.openjdk.java.net/jdk/jdk11/file/1ddf9a99e4ad/src/hotspot/os/bsd/os_bsd.cpp#l893[MacOS]
[source,cpp]
----
jlong os::javaTimeMillis() {
  timeval time;
  int status = gettimeofday(&time, NULL);
  assert(status != -1, "bsd error");
  return jlong(time.tv_sec) * 1000  +  jlong(time.tv_usec / 1000);
}
----

The functions invoke the exactly same syscall, `gettimeofday`. The man page can provide us with more info, but more important with some valuable notes:

.link:http://man7.org/linux/man-pages/man2/gettimeofday.2.html[man page]
[source,man]
----
NAME
       gettimeofday, settimeofday - get / set time

NOTES
       The time returned by gettimeofday() is affected by discontinuous
       jumps in the system time (e.g., if the system administrator manually
       changes the system time).  If you need a monotonically increasing
       clock, see clock_gettime(2).
----



As we can see, the time is affected by discontinuous jumps in the system time, hence it’s not monotonic and the answer to the <<aq3,third question>> was yes which does makes sense, if we change the current time to one hour ago, we still want `currentTimeMillis` to return current time, even though the definition of the current time has changed. That’s why it's often called wall-clock time, the clock on the wall can also jump back in time if we adjust it.


==== The nanos of the current time

The same exploration path can be taken for `System.nanoTime()`, let's start from the Javadoc which has even more juicy details than the previous one.

.link:http://hg.openjdk.java.net/jdk/jdk11/file/1ddf9a99e4ad/src/java.base/share/classes/java/lang/System.java#l394[Javadoc]
[source,java]
----
/**
 * Returns the current value of the running Java Virtual Machine's
 * high-resolution time source, in nanoseconds.
 *
 * This method can only be used to measure elapsed time and is
 * not related to any other notion of system or wall-clock time.
 * The value returned represents nanoseconds since some fixed but
 * arbitrary <i>origin</i> time (perhaps in the future, so values
 * may be negative) ...
 *
 * <p>This method provides nanosecond precision, but not necessarily
 * nanosecond resolution ...
 *
 * <p>The values returned by this method become meaningful only when
 * the difference between two such values, obtained within the same
 * instance of a Java virtual machine, is computed.
 *
 * ...
 */
public static native long nanoTime();
----

Apparently, the time returned by this clock isn’t related to any system time, it can only be used to compare values within the same JVM instance, and it’s relative to an “origin” which can be in future, and therefore it can be negative. Similar to `currentTimeMillis`, this method provides nanosecond precision, but not necessarily nanosecond resolution.

Nano time can only be used to measure time intervals, so it ought to be monotonic, right? Unfortunately, the Javadoc doesn’t say anything about monotonicity, so the next step is the implementation.

.link:http://hg.openjdk.java.net/jdk/jdk11/file/1ddf9a99e4ad/src/hotspot/os/linux/os_linux.cpp#l1301[Linux]
[source,cpp]
----
jlong os::javaTimeNanos() {
  if (os::supports_monotonic_clock()) {
    struct timespec tp;
    int status = Linux::clock_gettime(CLOCK_MONOTONIC, &tp);
    assert(status == 0, "gettime error");
    jlong result = jlong(tp.tv_sec) * (1000 * 1000 * 1000) + jlong(tp.tv_nsec);
    return result;
  } else {
    timeval time;
    int status = gettimeofday(&time, NULL);
    assert(status != -1, "linux error");
    jlong usecs = jlong(time.tv_sec) * (1000 * 1000) + jlong(time.tv_usec);
    return 1000 * usecs;
  }
}
----

Here comes the first surprise, nanoTime is indeed monotonic but only when the underlying os supports it. To be fair, any modern Linux server will support `CLOCK_MONOTONIC` , there are however, some link:https://stackoverflow.com/a/51345008/1542319[rare situation] in which might not hold true.


.link:http://hg.openjdk.java.net/jdk/jdk11/file/1ddf9a99e4ad/src/hotspot/os/bsd/os_bsd.cpp#l893[MacOS]
[source,cpp]
----
jlong os::javaTimeNanos() {
  const uint64_t tm = mach_absolute_time();
  const uint64_t now = (tm * Bsd::_timebase_info.numer) / Bsd::_timebase_info.denom;
  const uint64_t prev = Bsd::_max_abstime;
  if (now <= prev) {
    return prev;   // same or retrograde time;
  }
  const uint64_t obsv = Atomic::cmpxchg(now, &Bsd::_max_abstime, prev);
  assert(obsv >= prev, "invariant");   // Monotonicity
  // If the CAS succeeded then we're done and return "now".
  // If the CAS failed and the observed value "obsv" is >= now then
  // we should return "obsv".  If the CAS failed and now > obsv > prv then
  // some other thread raced this thread and installed a new value, in which case
  // we could either (a) retry the entire operation, (b) retry trying to install now
  // or (c) just return obsv.  We use (c).   No loop is required although in some cases
  // we might discard a higher "now" value in deference to a slightly lower but freshly
  // installed obsv value.   That's entirely benign -- it admits no new orderings compared
  // to (a) or (b) -- and greatly reduces coherence traffic.
  // We might also condition (c) on the magnitude of the delta between obsv and now.
  // Avoiding excessive CAS operations to hot RW locations is critical.
  // See https://blogs.oracle.com/dave/entry/cas_and_cache_trivia_invalidate
  return (prev == obsv) ? now : obsv;
}
----

The first thing that stands out is the giant wall of comments, and as software engineers, we know if there is a comment then something dodgy is going on. LINK to OTHER BLOGS and SOURCES.

But at least, we can be confident that it is monotonic, right? Actually, it depends on your JVM version. If you search in the java jira, you can find this ticket that shows that nanoTime used to use gettimeofday which as we know is non-monotonic. Luckily, for OpenJDK based JVM from 8u20 onward, this has been resolved.

==== Is it enough to know just millis?

So, now, looking at the currentTimeMillis, you might wonder about the precision loss.

[source,cpp]
----
jlong os::javaTimeMillis() {
  timeval time;
  int status = gettimeofday(&time, NULL);
  assert(status != -1, "linux error");
  return jlong(time.tv_sec) * 1000  +  jlong(time.tv_usec / 1000);
                                                      // ^^ precision loss
}
----



The OS can give us additional information which we totally discard in order to fit it into a single long. What if we really want to know this time? In JDK 8, a new JSR 310 arrived which brought an ability to get an instance of Instant which contains the number of seconds and the number of nanoseconds since the second started.


.link:https://jcp.org/en/jsr/detail?id=310[JSR 310: Date and Time API]
[source,java]
----
Instant instant = Clock.systemUTC().instant();
long epochSecond = instant.getEpochSecond();
int nanoSinceSecond = instant.getNano();
----



So, finally, Java developers got access to a wall-clock time with high precision, great? Not so fast, if we take a look at the implementation in JDK8, we’ll find out that it just delegates to currentTimeMillis.

.link:http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/687fd7c7986d/src/share/classes/java/time/Clock.java#l469[JDK8 Clock]
[source,java]
----
@Override
public long millis() {
    return System.currentTimeMillis();
}
@Override
public Instant instant() {
    return Instant.ofEpochMilli(millis());
}
----

The corresponding issue in OpenJDK was already closed, and the precision was increased, but it requires an update to JDK9 where the call is native with the following implementation on Linux:

.link:http://hg.openjdk.java.net/jdk/jdk11/file/1ddf9a99e4ad/src/hotspot/os/linux/os_linux.cpp#l1211[JDK9+ Clock]
[source,java]
----
void os::javaTimeSystemUTC(jlong &seconds, jlong &nanos) {
  timeval time;
  int status = gettimeofday(&time, NULL);
  assert(status != -1, "linux error");
  seconds = jlong(time.tv_sec);
  nanos = jlong(time.tv_usec) * 1000;
}
----

Which assuming that your OS can provide microsecond resolution, is a great example of a clock with nanosecond precision, but only microsecond resolution.


=== Time exchange

However, the main reason to use wall-clock time is to be able to relate this event to something else that’s happening outside of this machine. It can be a log line, or an entry which is sent to the database to decide on the final value in the DB cell. This strategy is called last write wins, and it’s very reasonable, the only problem is to make sure that the decision based on timestamps makes sense.


LWW strategy, when your clocks are not synchronized - lucky write wins.
++++
<div class="canva-embed" data-design-id="DADZmyL_mRw" data-height-ratio="0.5625" style="padding:56.2500% 5px 5px 5px;background:rgba(0,0,0,0.03);border-radius:8px;"></div><script async src="https:&#x2F;&#x2F;sdk.canva.com&#x2F;v1&#x2F;embed.js"></script>
++++

In the slides above, we've two clients: Alice and Bob who are trying to write simultaneously into a single a database with two nodes. The first write by Alice was successfully synchronized, but the second Alice's write happened approximately at the same time as the Bob's write. In this situation, the database must resolve the conflict so that the data is consistent between all of the nodes. In the case of LWW, the latest write will be chosen. To ensure that the notion of the latest makes sense, the clocks on all of nodes in the cluster must be synchronised.

==== NTP
The standard approach to make sure that the clocks on our databases are synchronized is to use Network Time Protocol (NTP). Consider the situation in which server A synchronises its clock with another server B. NTP works under assumption that time of the call from A to B is the same as the time needed to deliver the response from B to A.

…


Leap second


==== Cloud provider time
The NTP server can’t always be close. If we want good time, cloud providers build their own NTP servers. E.g. for AWS, ntp. And for google cloud
Smearing, theoretically you benchmarks can be slower. But in reality, it’s not really possible to notice.


True time
But how precise NTP can be? The best source is the Spanner paper:

[quote, Spanner: Google’s Globally-Distributed Database]
____
Between synchronizations, a daemon advertises a slowly increasing time uncertainty. ε is derived from conservatively applied worst-case local clock drift. ε also depends on time-master uncertainty and communication delay to the time masters. In our production environment, ε is typically a sawtooth function of time, varying from about 1 to 7 ms over each poll interval. ε̅ is therefore 4 ms most of the time. The daemon’s poll interval is currently 30 seconds, and the current applied drift rate is set at 200 microseconds/second, which together accounts for the sawtooth bounds from 0 to 6 ms.
____

Even if the stats in your cluster show that the clocks in our cluster are synchronised with microsecond precision, we need to be cautious and shouldn't rely on this in our software if a failure of this assumption is unacceptable.


=== Logical conclusion

So, what is a failure is unacceptable and we need to know the order of the event in a distrubted system, is there anything we can do? As always, there is a number of solutions prenseted by academia.

==== Lamport clocks

The very first is the famous paper by Leslie Lamport.

++++
<div class="canva-embed" data-design-id="DADZnGWHlAU" data-height-ratio="0.5625" style="padding:56.2500% 5px 5px 5px;background:rgba(0,0,0,0.03);border-radius:8px;"></div><script async src="https:&#x2F;&#x2F;sdk.canva.com&#x2F;v1&#x2F;embed.js"></script>
++++

Unfortunatelly, it's not always happy.

++++
<div class="canva-embed" data-design-id="DADZnC8PNnM" data-height-ratio="0.5625" style="padding:56.2500% 5px 5px 5px;background:rgba(0,0,0,0.03);border-radius:8px;"></div><script async src="https:&#x2F;&#x2F;sdk.canva.com&#x2F;v1&#x2F;embed.js"></script>
++++



==== Vector clocks

Another algoritm. A version of this system is described in Dynamo paper.

++++
<div class="canva-embed" data-design-id="DADZnKp0nOE" data-height-ratio="0.5625" style="padding:56.2500% 5px 5px 5px;background:rgba(0,0,0,0.03);border-radius:8px;"></div><script async src="https:&#x2F;&#x2F;sdk.canva.com&#x2F;v1&#x2F;embed.js"></script>
++++


++++
<div class="canva-embed" data-design-id="DADZnBQkwxE" data-height-ratio="0.5625" style="padding:56.2500% 5px 5px 5px;background:rgba(0,0,0,0.03);border-radius:8px;"></div><script async src="https:&#x2F;&#x2F;sdk.canva.com&#x2F;v1&#x2F;embed.js"></script>
++++
Conflict keeps it.

Overhead, cassandra prefers LWW for a reason.


=== Conclusion
* Use `System.nanoTime()` for measuring time intervals
* Use `System.currentTimeMillis()` for getting wall-clock time
* Use `Clock.systemUTC().instant()` for getting wall-clock time with ns _precision_
* Note that not every clock can give you the resolution you want even if the precision is high
* The wall-clock time can be off by dozens of milliseconds (or more, or less)
* Use NTP from your cloud provider if time matters
* Logical clock might be more appropriate than the real clock but it has associated cost


=== Thanks

- 1

Join us

=== Share this article


=== References
* link:https://shipilev.net/blog/2014/nanotrusting-nanotime/[Nanotrusting the Nanotime]
* link:https://www.usenix.org/system/files/conference/osdi12/osdi12-final-16.pdf[Spanner: Google’s Globally-Distributed Database]
* link:https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/set-time.html[AWS NTP] / link:https://developers.google.com/time/[Google NTP]
* link:https://www.youtube.com/watch?v=un1AHZBgFfk[Video PWLSF - Bryan Fink on "A Brief History of NTP Time: Memoirs of an Internet Timekeeper"]
* link:https://ieeexplore.ieee.org/abstract/document/103043/[Internet time synchronization: the network time protocol]
* link:https://blog.cloudflare.com/how-and-why-theleap-second-affected-cloudflare-dns/[How and why the leap second affected Cloudflare DNS]
* link:https://aphyr.com/posts/299-the-trouble-with-timestamps[The trouble with timestamps]
* link:http://lamport.azurewebsites.net/pubs/time-clocks.pdf[Time, Clocks, and the Ordering of Events in a Distributed System]
* link:http://zoo.cs.yale.edu/classes/cs426/2012/lab/bib/fidge88timestamps.pdf[Timestamps in Message-Passing Systems That Preserve the Partial Ordering]
* link:https://blog.rapid7.com/2014/03/14/synchronizing-clocksin-a-cassandra-cluster-pt-1-the-problem/[Synchronizing Clocks In a Cassandra Cluster]
* link:https://www.datastax.com/dev/blog/why-cassandra-doesntneed-vector-clocks[Why Cassandra doesn’t need vector clocks]
* link:https://www.allthingsdistributed.com/files/amazondynamo-sosp2007.pdf[Dynamo: Amazon’s Highly Available Key-value Store]
* link:http://basho.com/posts/technical/why-vector-clocks-are-easy/[Why Vector Clocks Are Easy]
* link:http://basho.com/posts/technical/why-vector-clocks-are-hard/[Why Vector Clocks Are Hard]
