{:title "Pure ASM in jungles of Panama"
 :layout :post
 :tags  ["jdk10" "jmh" "asm" "panama" "java"]
 :toc false
}

:toc: macro

Hi!

In this article,  Iâ€™ll tell you about some internal features of project Panama (targeting JDK10). You will be known about
how to incredibly increase performance using pure assembler. ... intrinsics


[.text-center]
image:/img/panama/panama.jpg[]
[.text-center]
[quote]
____
We had two builds of jvm, seventy-five native function, five sheets of high powered method handles, a panama repository full of crazy features, and a whole galaxy of native data layouts, headers, compilers, optimizations... and also a quart of heap, a case of wrappers, a pint of raw memory and two dozen AVX2 instructions.

Not that we needed all that for the trip to panama, but once you get locked into a serious jvm crash collection, the tendency is to push it as far as you can.
____

So, let's begin our journey.

== Welcome to Panama

link:http://openjdk.java.net/projects/panama/[Panama] is a new project under OpenJDK that tries to improve the connection between JVM and foreign APIs, including many interfaces commonly used by C programmers.
It is the missing piece in Java ecosystem, a bridge between JAVA and native code.

The primary features that will have brought by the Panama project are:

- Native function calling and native data access with huge JIT support (see link:http://openjdk.java.net/jeps/191[JEP191]) +
  (The similar problem but without huge runtime support can be solved using JNR that I mentioned in my link:/posts/22-06-2015-jnr-fuse/[previous article])
- New data layouts
- Special tooling for wrapping native libraries

The full overview of the problems that Panama tries to solve you can find in the link:https://blogs.oracle.com/jrose/entry/the_isthmus_in_the_vm[blog post] written by John Rose.

But today we will uncover about some special features that haven't been mentioned a lot.

In last December Vladimir Ivanov, one of contributors of Panama project made a commit where He introduce an ability to call a snipped of Java code in runtime...
++++
<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">Project Panama: Machine code snippets and vector values support in HotSpot JVM <a href="https://t.co/lW9GvKKk5h">https://t.co/lW9GvKKk5h</a> <a href="https://twitter.com/hashtag/java?src=hash">#java</a></p>&mdash; Vladimir Ivanov (@iwan0www) <a href="https://twitter.com/iwan0www/status/672824680227708928">December 4, 2015</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
++++

Really, it is true now, you can made an inline assembler call, crazy stuff... It is like to write your own intrinsic. So let's explore this opportunity.


== The edge of the forest
The first program that every programmer writes in a new language is "Hello, World!". But it is assembler. And it is called from Java, so let's make it simple. +
Say, A+B+C function:
[source, java]
----
static final MethodHandle sum3 = jdk.internal.panama.CodeSnippet.make(
            "sum3", MethodType.methodType(int.class,/*result*/
                                          int.class /*rdi*/,
                                          int.class /*rsi*/,
                                          int.class /*rdx*/),
            true, /* isSupported */
            0x48, 0x89, 0xF0, // mov    rax,rsi
            0x48, 0x01, 0xF8, // add    rax,rdi
            0x48, 0x01, 0xD0  // add    rax,rdx
    );
----

== Go deeper to hidden places

3)

Let's try loop with c++ O2
what happend? Slower?


AVX2 optimization

== Performance exploration
4) Vs intrinsic vs JNI


== Conclusions
- Nothing is impossible
- Useless but interesting
- You need to understand before optimize
