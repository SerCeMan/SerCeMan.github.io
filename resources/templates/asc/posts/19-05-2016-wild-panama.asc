{:title "Pure ASM in jungles of Panama"
 :layout :post
 :tags  ["jdk10" "jmh" "asm" "panama" "java"]
 :toc false
}

:toc: macro

Hi!

In this article,  Iâ€™ll tell you about some internal features of project Panama (targeting JDK10). You will be known about
how to incredibly increase performance using pure assembler. ... intrinsics


[.text-center]
image:/img/panama/panama.jpg[]
[.text-center]
[quote]
____
We had two builds of jvm, seventy-five native function, five sheets of high powered method handles, a panama repository full of crazy features, and a whole galaxy of native data layouts, headers, compilers, optimizations... and also a quart of heap, a case of wrappers, a pint of raw memory and two dozen AVX2 instructions.

Not that we needed all that for the trip to panama, but once you get locked into a serious jvm crash collection, the tendency is to push it as far as you can.
____

So, let's begin our journey.

== Welcome to Panama


== The edge of the forest


a + b example


== Go deeper to hidden places

3)

Let's try loop with c++ O2
what happend? Slower?


AVX2 optimization

== Performance exploration
4) Vs intrinsic vs JNI


== Conclusions
- Nothing is impossible
- Useless but interesting
- You need to understand before optimize
