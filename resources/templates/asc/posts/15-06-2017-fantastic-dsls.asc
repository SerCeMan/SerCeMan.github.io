{:title "Fantastic DSLS and where to find them"
 :layout :post
 :tags  ["kotlin" "dsl" "html" "persistent data structures"]
 :toc false
}

:sourcedir: src/posts/fantastic
:toc: macro

Hi!

Kotlin is a very rich language. Unlike many other languages, it allows building another language inside itself. For example,
mimic HTML syntax or build completely typed SQL query. But Kotlin’s power isn’t limited to simple DSLs. With some Kotlin-fu,
it’s possible to write a DSL that allows working on untyped data structures in a typed manner.
In this article, we’ll go through different ways to define DSL in Kotlin, from very simple to fantastically powerful.

{empty} +
[.text-center]
image:/img/wild-panama/panama.jpg[]
[.text-center]
{empty} +
[quote]
____
TODO
____

WARNING: TODO

So, let's begin our journey.

== What is DSL

[quote, Martin Fowler, Domain-Specific Languages]
____
Domain-specific language (noun): a computer programming language of limited expressiveness focused on a particular domain
____

Though, in this article I'd prefer to give DSL a slightly different definition which reflects what is written in
that article

[quote]
____
a language (or a set of abstractions) that's built to deal with a specific domain
____

The main difference is that a DSL might not be a separate language, but just a subset of some language which is used to
work on a specific domain. This kind of DSL can be built even in java with some fluent API, but very often it's
indistinguishable from a plain good code. On contrast in Kotlin, there are many features that might make an internal
DSL look different.

== Extension functions

The first feature actively used by DSLs in Kotlin is extension functions.
Extension functions allows you to extend functionality of the class from outside.

.Simple extension function
[source,kotlin]
----
fun String.removeSpaces(): String {
    return this.filter({ c -> c != ' ' })
}

print("Hi ! , ext".removeSpaces()) // "Hi!,ext"
----

Here, the `removeSpace` function is defined on the class String which allows calling `removeSpaces` on any instance of
the class String. Unsurprisingly, it removes all the spaces from it. Inside the functions `this` refers to the instance
of the receiver class and can be omitted. This might look complicated if you have never heard about before, but the
result of the compilation might make it much easier to understand.

.Decompiled java code
[source,java]
----
public static String removeSpaces(String $receiver) {
  StringBuilder sb = new StringBuilder();
  for (int i = 0; i < $receiver.length(); i++) {
    char c = $receiver.charAt(i);
    if (c != ' ') {
      sb.append(c);
    }
  }
  return sb.toString();
}
----

Extension functions are not some kind of magic. It's not a groovy-like monkey patching, they compiles to simple static
functions. But that example shows very important caveat - extension functions are resolved statically.

Even though this snippet is very simple, it can raise another question - "where `StringBuilder` came from?".
An intent look at the first snippet through `java` glasses gives an answer - there is no function called `filter` in
the class String.

.filter function from kotlin stdlib
----
public inline fun String.filter(predicate: (Char) -> Boolean): String {
  val destination = StringBuilder()
  for (index in 0..length - 1) {
    val element = get(index)
    if (predicate(element))
      destination.append(element)
  }
  return destination.toString()
}
----

Kotlin defines a lot of extension functions for java classes in the standard library. That's why Kotlin is so convenient
to use. One might notice that the function has `inline` modifier on it which explains why decompiled `removeSpaces` has
a `StringBuilder` inside and not a call to `filter`. Usually, inline functions don't improve performance at all,
they even can make it worse. There is even an inspection for that in IntelliJ IDEA. But this modifiers can help a lot
in the famous NUMBER problem in the android world. There are also some other uses for `inline`.


Ok, so Kotlin has a `filter` function in the standard library. But it's clearly missing a map function. So, let's write it.

.very weird map function
[source,kotlin]
----
fun String.map(f: (Char) -> Char): String {
  return toCharArray().map(f).joinToString("")
}

val cypher = "Hello, DSL".map { it + 1 }
println(cypher) // Ifmmp-!ETM
----

Apart from the reason why Kotlin is missing it, the function shows another feature very important for DSLs.
In Kotlin, there is a convention that if the last parameter to a function is a function, and you're passing a
lambda expression there, you can specify it outside of parens. In the case of map it leads to an empty `()` block which
can be omitted.


=== First simple DSL

Given aforementioned features, it's very easy to write a first very simple DSL. Let's say we need to write an event
based droid fighting platform. So that users can provide their own strategies and register them in the platform.
For each event user is interested in, he needs to provide a callback with the droid's behaviour.
A droid has an interface with a few methods for defeating other droids. Or, humans if you will.

.the droid
[source,kotlin]
----
interface Droid {
  val peopleAround: Boolean
  val gun: Gun

  fun fire(gun: Gun)
  fun moveLeft()
  fun moveRight()
}
----

For providing droid's behaviour we'll write a public function.

.API
[source,kotlin]
----
private val droid: Droid = getDroid() // inaccessible from the public API

public fun on(cmd: String, f: Droid.() -> Unit) {
// ...
  droid.f()
// ...
}
----

The type of the argument `f` might look weird, but it's just a type of an extension function on the type Droid. And
finally, APIs consumers can
register events in the platform.

.strategy example
[source,kotlin]
----
on("back") {
  moveLeft()
  if (peopleAround) {
    fire(gun)
  }
}
----

Here, the anonymous extension function is a second parameter and therefore can be writen outside parens.
`this` in the function has a type `Droid` and therefore `moveLeft()` as well as other functions and properties can be
called by themselves without providing an explicit receiver type.

The strategy looks very natural, it clearly says that if our droid receives a `back` command, it should move left and
try to shoot some folks around. The next snippet shows what it compiles to make it even clearer for those who don't speak
kotlin well yet.

.decompiled java call
[source,java]
----
on("back", new Function1<Droid, Unit>() {
  public Unit invoke(Droid droid) {
    droid.moveLeft();
    if (droid.getPeopleAround()) {
      droid.fire(droid.getGun());
    }
    return Unit.INSTANCE;
  }
});
----

== HTML builders

And building DSL on the top extension function isn't limited to simple droid fighting strategies. For example, it allows
building a completely typed HTML syntax. HTML builders are even mentioned in the official documentation.

.html builders
[source,kotlin]
----
val list = listOf("Kotlin", "is", "awesome")
val result: HTML =
  html {
    head {
      title { +"HTML DSL in Kotlin" }
    }
    body {
      p {
        +"a line about Kotlin"
      }
      a(href = "jetbrains.com/kotlin") {
        +"Kotlin"
      }
      p {
        +"Kotlin is:"
        ul {
          for (arg in list)
            li { +arg }
        }
      }
    }
  }
println(result)
----

And these type-safe builders isn't a Kotlin invention, they were originated in Groovy. But in Groovy is a dynamic language,
builders there are not type-safe.

IMPORTANT: It wouldn't be completely fair to say that even thought it's what Kotlin's documentation
           says. Groovy supports static compilation optionally and there are some ways to compile
           builders statically as well. (http://melix.github.io/blog/2013/02/13/static_builders_inception.html)

The implementation of a DSL in dynamically typed language is often very different to statically typed. In Kotlin in order
to build a DSL, you need to describe the whole schema of the future language. And given that the result is a deeply nested
data structure, the easies way to convert it to string is to transfer the whole data-structure is to transfer it recursively.

.base interface
[source,kotlin]
----
interface Element {
  fun render(builder: StringBuilder, indent: String)
}
----

And the simplest line of text can be represented as

[source,kotlin]
----
class TextElement(val text: String) : Element {
  override fun render(builder: StringBuilder, indent: String) {
    builder.append("$indent$text\n")
  }
}
----

The real tag representation is a bit more complex

[source,kotlin]
----
abstract class Tag(val name: String) : Element {
  val children = arrayListOf<Element>()
  val attributes = hashMapOf<String, String>()

  override fun render(builder: StringBuilder, indent: String) {
    builder.append("$indent<$name${renderAttributes()}>\n")
    for (c in children) {
      c.render(builder, indent + "  ")
    }
    builder.append("$indent</$name>\n")
  }

  private fun renderAttributes() = attributes.map { (k, v) -> " $k=\"$v\"" }.joinToString("")

  protected fun <T : Element> initTag(tag: T, init: T.() -> Unit) {
    tag.init()
    children.add(tag)
  }

  operator fun String.unaryPlus() {
    children.add(TextElement(this))
  }

  override fun toString(): String {
    val builder = StringBuilder()
    render(builder, "")
    return builder.toString()
  }
}
----

It contains a representation for attributes, set of children. But the main part that requires attention is the `initTag`
function which looks very similar to aforementioned `on` from the "robot fighting" DSL definition.

Another interesting part is an extension function `unaryPlus` defined as an operator for class String inside the `Tag`.
It allows using convenient (but let's be honest very non-obvious) way to insert a line of text inside code like:

.¯\\_(ツ)_/¯ unary plus to append a line of text
[source,kotlin]
----
body {
  +"just a random line"
  +"another line"
}
----

And the rest of the DSL is an enumeration of all possible tags.

.<head>,<title>,<body>,<a>,<ul>,<li>,<p>
[source,kotlin]
----
class HTML : Tag("html") {
  fun head(init: Head.() -> Unit) = initTag(Head(), init)

  fun body(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head : Tag("head") {
  fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title : Tag("title")

abstract class BodyTag(name: String) : Tag(name) {
  fun p(init: P.() -> Unit) = initTag(P(), init)
  fun ul(init: UL.() -> Unit) = initTag(UL(), init)
  fun a(href: String, init: A.() -> Unit) {
    val a = A()
    initTag(a, init)
    a.href = href
  }
}

class Body : BodyTag("body")
class UL : BodyTag("ul") {
  fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class LI : BodyTag("li")
class P : BodyTag("p")

class A : BodyTag("a") {
  var href: String
    get() = attributes["href"] ?: ""
    set(value) {
      attributes["href"] = value
    }
}
----

As you can see all these classes define a possible hierarchy of calls. This DSL is just a toy DSL and therefore it
covers a very small and limited subset of HTML. It is extremely tedious to write the whole
HTML dsl manually. The real DSL implementation (https://github.com/Kotlin/kotlinx.html) uses a real XSD schema to generate
all possible classes for the DSL.

=== There is always a problem

This could already be awesome, but the example demonstrates a very weird behaviour - nobody stops you from defining
tags inside each other multiple times. Despite being essential in the `BodyTag`, nobody expects a few nested `head` tags.

.the problem
[source,kotlin]
----
head {
  head {
    head {
      // stil possible to write head because implicit receiver html is available
    }
  }
  title { +"XML encoding with Kotlin" }
}
----

Prior to Kotlin 1.1 the only solution was to redefine function with deprecation.

[source,kotlin]
----
class Head : Tag("head") {
  @Deprecated(message = "wrong scope", level = DeprecationLevel.ERROR)
  fun head(init: Head.() -> Unit) = initTag(Head(), init)

  fun title(init: Title.() -> Unit) = initTag(Title(), init)
}
----

SCREENSHOT

The problem with this approach is that it requires an incredible amount of boilerplate and full understanding of all
possible combinations. Since 1.1 another approach is available, the `@DslMarker` annotation was introduced which
allows to define a `DSL marker` and introduce a rule for classes annotated with that marker:

if two implicit receivers of the same DSL are not accessible in the same scope:

* the closest one wins
* other available receivers are resolved as usual, but if the resulting resolved call binds to such a receiver, it's a compilation error

So, the HTML DSL can be fixed by introducing a `DSL marker` `HtmlTagMarker` and marking `Tag` with that marker

[source,kotlin]
----
@HtmlTagMarker
abstract class Tag(val name: String) : Element {
 // ...
}
----

SCREENSHOT

And DSLs that allow constructing nested data structures such as HTML builders, different configurations, UI builders, etc. is
where Kotlin really shines. It took an awesome idea from Groovy and made it safe and easy to use.

There are just a few more examples of DSLs of that kind:

* link:http://blog.jetbrains.com/teamcity/2016/11/kotlin-configuration-scripts-an-introduction/[TeamCity DSL]
* link:http://github.com/gradle/gradle-script-kotlin[Gradle with Kotlin]
* link:http://github.com/gradle/gradle-script-kotlin[Anko]
* link:http://spekframework.org[Spek framework]

But unsurprisingly, it's not the only type of DSL that can be implemented in Kotlin...

== Fantastic DSL

Let's imagine, we have a completely different domain. A system which handles transactions with a payment in some currency
and two people - sender and receiver.

[.text-center]
image:/img/fantastic/domain.svg[]

Somewhere deeply in the bossiness logic the requirement was set - to implement a functionality where the name of the receiver (from)
person needs to be changed to let's say "john". Poorly "john". And of course, the transaction structure representation
must be immutable. There are a few ways to implement it in Kotlin

=== Data classes

Let's start with a idiomatic Kotlin way. The class hierarchy can be concisely represented as

.data
[source,kotlin]
----
data class Transaction(val payment: Payment, val parts: Parts)
data class Payment(val currency: String, val amount: Int)
data class Parts(val from: Person, val to: Person)
data class Person(val id: Int, val name: String)
----

An instance of transaction can be easily created as well

.create
[source,kotlin]
----
val trs = Transaction(
  Payment("AUD", 15),
  Parts(
    Person(0, "alex"),
    Person(1, "ben")
  )
)
----

But problems start when we need to update this nested data structure. Generally, there two ways to update it

.update
[source,kotlin]
----
val trans = Transaction(trs.payment, Parts(
  Person(trs.parts.from.id, "john"),
  trs.parts.to)
)
----

Completely recreate it which doesn't look good. Or to use copy LINK.

.update
[source,kotlin]
----
val stansTrs2 = trs.copy(
  parts = trs.parts.copy(
    from = trs.parts.from.copy(
      name = "john"
    )
  )
)
----

And copy version doesn't look good either. Even though it's tolerable now, the bigger the data structure the uglier
code look like. On a deeply nested immutable data structure it looks like a triangle instead of simple call chain from
the mutable world.

.ohhhh
[source,kotlin]
----
val stansTrs2 = trs.copy(
  parts = trs.parts.copy(
    from = trs.parts.from.copy(
      person = trs.parts.from.person.copy(
        parts = trs.parts.from.person.parts.copy(
          from = trs.parts.from.person.parts.from.copy(
            person = trs.parts.from.person.parts.from.person.copy(
              parts = trs.parts.from.person.parts.from.person.parts.copy(
                from = trs.parts.from.person.parts.from.person.parts.from.copy(
                  person = trs.parts.from.person.parts.from.person.parts.from.person.copy(
                    parts = trs.parts.from.person.parts.from.person.parts.from.person.parts.copy(
                      from = trs.parts.from.person.parts.from.person.parts.from.person.parts.from.copy(
                        name = "jonh"
                      ))))))))))))
----

Don't get me wrong, I like parentheses. It feels like lisp a lot, but what no one likes is the wall of boilerplate above.

=== Persistent Data Structures

There is another awesome language called Clojure. It's lisp running on JVM where every data structure is persistent
(don't confuse with immutable, even though it's immutable LINK). In Clojure the same problem can be solved with defining
transaction as a persistent map.

.create
[source,clojure]
----
(def ts {:payment {:currency "AUD"
                   :amount   15}
         :parts   {:from {:id   0
                          :name "alex"}
                   :to   {:id   1
                          :name "ben"}}})
----

Not as concise as Kotlin version, but still pretty good. What is completely different to Kotlin is the update function

.update
[source,clojure]
----
(def ts2 (assoc-in ts [:parts :from :name] "john"))
----

It's just one line. The next picture might be essential to understand how it works.

IMG

Given that each node has a known type and universal way of traverse, it's possible to write a function `assoc-in` which
can change a value under given "path" and recreate the data structure. But Clojure's internals are plain java classes that
can be used from Kotlin easily just with a few "convenience" adapters to keep familiar syntax.

.create
[source,kotlin]
----
val tran = pArrayMap(
  "payment" to pArrayMap(
    "currency" to "AUD",
    "amount" to 15
  ),
  "parts" to pArrayMap(
    "from" to pArrayMap(
      "id" to 0,
      "name" to "alex"
    ),
    "to" to pArrayMap(
      "id" to 1,
      "name" to "ben"
    )
  )
)
----

Yes, the creation looks rather ugly.  It's untyped, all the names represented as maps, but look at the update

.update
[source,kotlin]
----
val trans2 = trans.pUpdate(listOf("parts", "from", "name"), "john")
----

It's still as concise as Clojure's one.


But is it possible to build a DSL which keeps kotlin's types and provides Clojure's conciseness?

=== Cursor DSL


== Conclusions

* DSLs in Kotlin are easy to build
* DSLs in Kotlin work ideally as configuration API
* They can work as a powerful abstraction

=== Warning

* Most of the time a plain code is better than DSL
* Give a way to bypass your DSL

=== Links

=== Thanks

- You for reading it


