<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" onload="init(evt)" viewBox="0 0 1200 694" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="677"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="677"> </text>
<g id="frames">
<g>
<title>all (2,009 samples, 100.00%)</title><rect x="10.0" y="643.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="654.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="10.0" y="627.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>pthread_cond_timedwait@@GLIBC_2.3.2 (1 samples, 0.05%)</title><rect x="10.0" y="611.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>java/lang/Thread.run (2,006 samples, 99.85%)</title><rect x="10.6" y="627.0" width="1178.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.6" y="638.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (2,006 samples, 99.85%)</title><rect x="10.6" y="611.0" width="1178.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.6" y="622.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (2,006 samples, 99.85%)</title><rect x="10.6" y="595.0" width="1178.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.6" y="606.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (2,006 samples, 99.85%)</title><rect x="10.6" y="579.0" width="1178.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.6" y="590.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>java/util/concurrent/Executors$RunnableAdapter.call (2,006 samples, 99.85%)</title><rect x="10.6" y="563.0" width="1178.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.6" y="574.0">java/util/concurrent/Executors$RunnableAdapter.call</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (2,006 samples, 99.85%)</title><rect x="10.6" y="547.0" width="1178.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.6" y="558.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call (2,006 samples, 99.85%)</title><rect x="10.6" y="531.0" width="1178.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.6" y="542.0">org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call</text>
</g>
<g>
<title>org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call (2,006 samples, 99.85%)</title><rect x="10.6" y="515.0" width="1178.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.6" y="526.0">org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call</text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (2,006 samples, 99.85%)</title><rect x="10.6" y="499.0" width="1178.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.6" y="510.0">java/lang/reflect/Method.invoke</text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (2,006 samples, 99.85%)</title><rect x="10.6" y="483.0" width="1178.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.6" y="494.0">jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke</text>
</g>
<g>
<title>jdk/internal/reflect/NativeMethodAccessorImpl.invoke (2,006 samples, 99.85%)</title><rect x="10.6" y="467.0" width="1178.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.6" y="478.0">jdk/internal/reflect/NativeMethodAccessorImpl.invoke</text>
</g>
<g>
<title>jdk/internal/reflect/NativeMethodAccessorImpl.invoke0 (2,006 samples, 99.85%)</title><rect x="10.6" y="451.0" width="1178.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.6" y="462.0">jdk/internal/reflect/NativeMethodAccessorImpl.invoke0</text>
</g>
<g>
<title>me/serce/jmh_generated/CopyFileBenchmark_reverseBytesInFiles_jmhTest.reverseBytesInFiles_AverageTime (2,006 samples, 99.85%)</title><rect x="10.6" y="435.0" width="1178.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.6" y="446.0">me/serce/jmh_generated/CopyFileBenchmark_reverseBytesInFiles_jmhTest.reverseBytesInFiles_AverageTime</text>
</g>
<g>
<title>me/serce/jmh_generated/CopyFileBenchmark_reverseBytesInFiles_jmhTest.reverseBytesInFiles_avgt_jmhStub (2,006 samples, 99.85%)</title><rect x="10.6" y="419.0" width="1178.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.6" y="430.0">me/serce/jmh_generated/CopyFileBenchmark_reverseBytesInFiles_jmhTest.reverseBytesInFiles_avgt_jmhStub</text>
</g>
<g>
<title>me/serce/CopyFileBenchmark.reverseBytesInFiles (2,006 samples, 99.85%)</title><rect x="10.6" y="403.0" width="1178.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.6" y="414.0">me/serce/CopyFileBenchmark.reverseBytesInFiles</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (1,003 samples, 49.93%)</title><rect x="10.6" y="387.0" width="589.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.6" y="398.0">sun/nio/ch/FileChannelImpl.read</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1,003 samples, 49.93%)</title><rect x="10.6" y="371.0" width="589.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.6" y="382.0">sun/nio/ch/IOUtil.read</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (501 samples, 24.94%)</title><rect x="10.6" y="355.0" width="294.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="13.6" y="366.0">java/nio/HeapByteBuffer.put</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (501 samples, 24.94%)</title><rect x="10.6" y="339.0" width="294.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.6" y="350.0">java/nio/DirectByteBuffer.get</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (501 samples, 24.94%)</title><rect x="10.6" y="323.0" width="294.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.6" y="334.0">jdk/internal/misc/Unsafe.copyMemory</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory0 (501 samples, 24.94%)</title><rect x="10.6" y="307.0" width="294.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.6" y="318.0">jdk/internal/misc/Unsafe.copyMemory0</text>
</g>
<g>
<title>acl_CopyRight (501 samples, 24.94%)</title><rect x="10.6" y="291.0" width="294.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="13.6" y="302.0">acl_CopyRight</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (502 samples, 24.99%)</title><rect x="304.9" y="355.0" width="294.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="307.9" y="366.0">sun/nio/ch/IOUtil.readIntoNativeBuffer</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read (502 samples, 24.99%)</title><rect x="304.9" y="339.0" width="294.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="307.9" y="350.0">sun/nio/ch/FileDispatcherImpl.read</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (502 samples, 24.99%)</title><rect x="304.9" y="323.0" width="294.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="307.9" y="334.0">sun/nio/ch/FileDispatcherImpl.read0</text>
</g>
<g>
<title>__read (502 samples, 24.99%)</title><rect x="304.9" y="307.0" width="294.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="307.9" y="318.0">__read</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (502 samples, 24.99%)</title><rect x="304.9" y="291.0" width="294.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="307.9" y="302.0">entry_SYSCALL_64_after_hwframe</text>
</g>
<g>
<title>do_syscall_64 (502 samples, 24.99%)</title><rect x="304.9" y="275.0" width="294.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="307.9" y="286.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_read (502 samples, 24.99%)</title><rect x="304.9" y="259.0" width="294.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="307.9" y="270.0">__x64_sys_read</text>
</g>
<g>
<title>ksys_read (502 samples, 24.99%)</title><rect x="304.9" y="243.0" width="294.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="307.9" y="254.0">ksys_read</text>
</g>
<g>
<title>vfs_read (502 samples, 24.99%)</title><rect x="304.9" y="227.0" width="294.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="307.9" y="238.0">vfs_read</text>
</g>
<g>
<title>__vfs_read (502 samples, 24.99%)</title><rect x="304.9" y="211.0" width="294.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="307.9" y="222.0">__vfs_read</text>
</g>
<g>
<title>new_sync_read (502 samples, 24.99%)</title><rect x="304.9" y="195.0" width="294.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="307.9" y="206.0">new_sync_read</text>
</g>
<g>
<title>ext4_file_read_iter (502 samples, 24.99%)</title><rect x="304.9" y="179.0" width="294.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="307.9" y="190.0">ext4_file_read_iter</text>
</g>
<g>
<title>generic_file_read_iter (502 samples, 24.99%)</title><rect x="304.9" y="163.0" width="294.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="307.9" y="174.0">generic_file_read_iter</text>
</g>
<g>
<title>generic_file_buffered_read (501 samples, 24.94%)</title><rect x="304.9" y="147.0" width="294.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="307.9" y="158.0">generic_file_buffered_read</text>
</g>
<g>
<title>_cond_resched (1 samples, 0.05%)</title><rect x="343.0" y="131.0" width="0.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="346.0" y="142.0"></text>
</g>
<g>
<title>copy_page_to_iter (416 samples, 20.71%)</title><rect x="343.6" y="131.0" width="244.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="346.6" y="142.0">copy_page_to_iter</text>
</g>
<g>
<title>copy_user_enhanced_fast_string (404 samples, 20.11%)</title><rect x="347.7" y="115.0" width="237.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="350.7" y="126.0">copy_user_enhanced_fast_string</text>
</g>
<g>
<title>copyout (3 samples, 0.15%)</title><rect x="585.0" y="115.0" width="1.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="588.0" y="126.0"></text>
</g>
<g>
<title>rcu_all_qs (2 samples, 0.10%)</title><rect x="586.8" y="115.0" width="1.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="589.8" y="126.0"></text>
</g>
<g>
<title>copyout (2 samples, 0.10%)</title><rect x="588.0" y="131.0" width="1.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="591.0" y="142.0"></text>
</g>
<g>
<title>mark_page_accessed (3 samples, 0.15%)</title><rect x="589.1" y="131.0" width="1.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="592.1" y="142.0"></text>
</g>
<g>
<title>pagecache_get_page (14 samples, 0.70%)</title><rect x="590.9" y="131.0" width="8.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="593.9" y="142.0"></text>
</g>
<g>
<title>PageHuge (1 samples, 0.05%)</title><rect x="590.9" y="115.0" width="0.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="593.9" y="126.0"></text>
</g>
<g>
<title>find_get_entry (13 samples, 0.65%)</title><rect x="591.5" y="115.0" width="7.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="594.5" y="126.0"></text>
</g>
<g>
<title>PageHuge (1 samples, 0.05%)</title><rect x="596.2" y="99.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="599.2" y="110.0"></text>
</g>
<g>
<title>xas_load (3 samples, 0.15%)</title><rect x="596.8" y="99.0" width="1.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="599.8" y="110.0"></text>
</g>
<g>
<title>xas_start (1 samples, 0.05%)</title><rect x="598.5" y="99.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="601.5" y="110.0"></text>
</g>
<g>
<title>mark_page_accessed (1 samples, 0.05%)</title><rect x="599.1" y="147.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="602.1" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.write (1,003 samples, 49.93%)</title><rect x="599.7" y="387.0" width="589.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="602.7" y="398.0">sun/nio/ch/FileChannelImpl.write</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1,003 samples, 49.93%)</title><rect x="599.7" y="371.0" width="589.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="602.7" y="382.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (501 samples, 24.94%)</title><rect x="599.7" y="355.0" width="294.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="602.7" y="366.0">java/nio/DirectByteBuffer.put</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (501 samples, 24.94%)</title><rect x="599.7" y="339.0" width="294.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="602.7" y="350.0">java/nio/DirectByteBuffer.put</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (501 samples, 24.94%)</title><rect x="599.7" y="323.0" width="294.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="602.7" y="334.0">jdk/internal/misc/Unsafe.copyMemory</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory0 (501 samples, 24.94%)</title><rect x="599.7" y="307.0" width="294.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="602.7" y="318.0">jdk/internal/misc/Unsafe.copyMemory0</text>
</g>
<g>
<title>acl_CopyRight (501 samples, 24.94%)</title><rect x="599.7" y="291.0" width="294.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="602.7" y="302.0">acl_CopyRight</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (502 samples, 24.99%)</title><rect x="894.0" y="355.0" width="294.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="897.0" y="366.0">sun/nio/ch/IOUtil.writeFromNativeBuffer</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (502 samples, 24.99%)</title><rect x="894.0" y="339.0" width="294.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="897.0" y="350.0">sun/nio/ch/FileDispatcherImpl.write</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (502 samples, 24.99%)</title><rect x="894.0" y="323.0" width="294.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="897.0" y="334.0">sun/nio/ch/FileDispatcherImpl.write0</text>
</g>
<g>
<title>__libc_write (502 samples, 24.99%)</title><rect x="894.0" y="307.0" width="294.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="897.0" y="318.0">__libc_write</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (502 samples, 24.99%)</title><rect x="894.0" y="291.0" width="294.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="897.0" y="302.0">entry_SYSCALL_64_after_hwframe</text>
</g>
<g>
<title>do_syscall_64 (502 samples, 24.99%)</title><rect x="894.0" y="275.0" width="294.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="897.0" y="286.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_write (502 samples, 24.99%)</title><rect x="894.0" y="259.0" width="294.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="897.0" y="270.0">__x64_sys_write</text>
</g>
<g>
<title>ksys_write (502 samples, 24.99%)</title><rect x="894.0" y="243.0" width="294.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="897.0" y="254.0">ksys_write</text>
</g>
<g>
<title>vfs_write (502 samples, 24.99%)</title><rect x="894.0" y="227.0" width="294.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="897.0" y="238.0">vfs_write</text>
</g>
<g>
<title>__vfs_write (502 samples, 24.99%)</title><rect x="894.0" y="211.0" width="294.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="897.0" y="222.0">__vfs_write</text>
</g>
<g>
<title>new_sync_write (502 samples, 24.99%)</title><rect x="894.0" y="195.0" width="294.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="897.0" y="206.0">new_sync_write</text>
</g>
<g>
<title>ext4_file_write_iter (502 samples, 24.99%)</title><rect x="894.0" y="179.0" width="294.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="897.0" y="190.0">ext4_file_write_iter</text>
</g>
<g>
<title>__generic_file_write_iter (502 samples, 24.99%)</title><rect x="894.0" y="163.0" width="294.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="897.0" y="174.0">__generic_file_write_iter</text>
</g>
<g>
<title>_cond_resched (1 samples, 0.05%)</title><rect x="894.0" y="147.0" width="0.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="897.0" y="158.0"></text>
</g>
<g>
<title>ext4_da_write_begin (5 samples, 0.25%)</title><rect x="894.6" y="147.0" width="2.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="897.6" y="158.0"></text>
</g>
<g>
<title>ext4_da_write_end (4 samples, 0.20%)</title><rect x="897.5" y="147.0" width="2.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="900.5" y="158.0"></text>
</g>
<g>
<title>generic_perform_write (492 samples, 24.49%)</title><rect x="899.8" y="147.0" width="289.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="902.8" y="158.0">generic_perform_write</text>
</g>
<g>
<title>_cond_resched (2 samples, 0.10%)</title><rect x="905.7" y="131.0" width="1.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="908.7" y="142.0"></text>
</g>
<g>
<title>balance_dirty_pages_ratelimited (1 samples, 0.05%)</title><rect x="906.9" y="131.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="909.9" y="142.0"></text>
</g>
<g>
<title>ext4_da_write_begin (96 samples, 4.78%)</title><rect x="907.5" y="131.0" width="56.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="910.5" y="142.0">ext4_d..</text>
</g>
<g>
<title>__ext4_journal_start_sb (51 samples, 2.54%)</title><rect x="912.2" y="115.0" width="29.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="915.2" y="126.0">__..</text>
</g>
<g>
<title>ext4_journal_check_start (1 samples, 0.05%)</title><rect x="915.1" y="99.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="918.1" y="110.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.05%)</title><rect x="915.1" y="83.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="918.1" y="94.0"></text>
</g>
<g>
<title>jbd2__journal_start (45 samples, 2.24%)</title><rect x="915.7" y="99.0" width="26.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="918.7" y="110.0">j..</text>
</g>
<g>
<title>_raw_read_lock (5 samples, 0.25%)</title><rect x="916.9" y="83.0" width="2.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="919.9" y="94.0"></text>
</g>
<g>
<title>kmem_cache_alloc (9 samples, 0.45%)</title><rect x="919.8" y="83.0" width="5.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="922.8" y="94.0"></text>
</g>
<g>
<title>_cond_resched (2 samples, 0.10%)</title><rect x="923.3" y="67.0" width="1.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="926.3" y="78.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.05%)</title><rect x="924.5" y="67.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="927.5" y="78.0"></text>
</g>
<g>
<title>memcg_kmem_put_cache (1 samples, 0.05%)</title><rect x="925.1" y="83.0" width="0.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="928.1" y="94.0"></text>
</g>
<g>
<title>memset_erms (3 samples, 0.15%)</title><rect x="925.7" y="83.0" width="1.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="928.7" y="94.0"></text>
</g>
<g>
<title>start_this_handle (25 samples, 1.24%)</title><rect x="927.5" y="83.0" width="14.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="930.5" y="94.0"></text>
</g>
<g>
<title>add_transaction_credits (10 samples, 0.50%)</title><rect x="936.3" y="67.0" width="5.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="939.3" y="78.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.05%)</title><rect x="942.1" y="115.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="945.1" y="126.0"></text>
</g>
<g>
<title>ext4_block_write_begin (12 samples, 0.60%)</title><rect x="942.7" y="115.0" width="7.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="945.7" y="126.0"></text>
</g>
<g>
<title>ext4_nonda_switch (2 samples, 0.10%)</title><rect x="949.8" y="115.0" width="1.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="952.8" y="126.0"></text>
</g>
<g>
<title>grab_cache_page_write_begin (21 samples, 1.05%)</title><rect x="950.9" y="115.0" width="12.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="953.9" y="126.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.05%)</title><rect x="950.9" y="99.0" width="0.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="953.9" y="110.0"></text>
</g>
<g>
<title>find_get_entry (1 samples, 0.05%)</title><rect x="951.5" y="99.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="954.5" y="110.0"></text>
</g>
<g>
<title>pagecache_get_page (19 samples, 0.95%)</title><rect x="952.1" y="99.0" width="11.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="955.1" y="110.0"></text>
</g>
<g>
<title>find_get_entry (14 samples, 0.70%)</title><rect x="955.1" y="83.0" width="8.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="958.1" y="94.0"></text>
</g>
<g>
<title>xas_load (5 samples, 0.25%)</title><rect x="959.8" y="67.0" width="2.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="962.8" y="78.0"></text>
</g>
<g>
<title>xas_start (1 samples, 0.05%)</title><rect x="962.7" y="67.0" width="0.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="965.7" y="78.0"></text>
</g>
<g>
<title>wait_for_stable_page (1 samples, 0.05%)</title><rect x="963.3" y="115.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="966.3" y="126.0"></text>
</g>
<g>
<title>ext4_da_write_end (94 samples, 4.68%)</title><rect x="963.9" y="131.0" width="55.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="966.9" y="142.0">ext4_..</text>
</g>
<g>
<title>__ext4_journal_stop (22 samples, 1.10%)</title><rect x="964.5" y="115.0" width="12.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="967.5" y="126.0"></text>
</g>
<g>
<title>jbd2_journal_stop (22 samples, 1.10%)</title><rect x="964.5" y="99.0" width="12.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="967.5" y="110.0"></text>
</g>
<g>
<title>__wake_up (9 samples, 0.45%)</title><rect x="971.5" y="83.0" width="5.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="974.5" y="94.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.05%)</title><rect x="971.5" y="67.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="974.5" y="78.0"></text>
</g>
<g>
<title>__wake_up_common_lock (8 samples, 0.40%)</title><rect x="972.1" y="67.0" width="4.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="975.1" y="78.0"></text>
</g>
<g>
<title>__lock_text_start (7 samples, 0.35%)</title><rect x="972.7" y="51.0" width="4.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="975.7" y="62.0"></text>
</g>
<g>
<title>kmem_cache_free (1 samples, 0.05%)</title><rect x="976.8" y="83.0" width="0.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="979.8" y="94.0"></text>
</g>
<g>
<title>generic_write_end (69 samples, 3.43%)</title><rect x="977.4" y="115.0" width="40.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="980.4" y="126.0">gen..</text>
</g>
<g>
<title>block_write_end (67 samples, 3.33%)</title><rect x="978.6" y="99.0" width="39.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="981.6" y="110.0">blo..</text>
</g>
<g>
<title>__block_commit_write.isra.0 (65 samples, 3.24%)</title><rect x="979.7" y="83.0" width="38.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="982.7" y="94.0">__b..</text>
</g>
<g>
<title>lock_page_memcg (1 samples, 0.05%)</title><rect x="987.4" y="67.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="990.4" y="78.0"></text>
</g>
<g>
<title>mark_buffer_dirty (51 samples, 2.54%)</title><rect x="987.9" y="67.0" width="30.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="990.9" y="78.0">ma..</text>
</g>
<g>
<title>__set_page_dirty (1 samples, 0.05%)</title><rect x="1017.3" y="51.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1020.3" y="62.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.05%)</title><rect x="1017.3" y="35.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1020.3" y="46.0"></text>
</g>
<g>
<title>unlock_page (2 samples, 0.10%)</title><rect x="1017.9" y="115.0" width="1.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1020.9" y="126.0"></text>
</g>
<g>
<title>ext4_nonda_switch (1 samples, 0.05%)</title><rect x="1019.1" y="131.0" width="0.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1022.1" y="142.0"></text>
</g>
<g>
<title>iov_iter_advance (4 samples, 0.20%)</title><rect x="1019.7" y="131.0" width="2.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1022.7" y="142.0"></text>
</g>
<g>
<title>iov_iter_copy_from_user_atomic (230 samples, 11.45%)</title><rect x="1022.0" y="131.0" width="135.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1025.0" y="142.0">iov_iter_copy_fro..</text>
</g>
<g>
<title>copy_user_enhanced_fast_string (227 samples, 11.30%)</title><rect x="1023.8" y="115.0" width="133.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1026.8" y="126.0">copy_user_enhance..</text>
</g>
<g>
<title>iov_iter_fault_in_readable (47 samples, 2.34%)</title><rect x="1157.1" y="131.0" width="27.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1160.1" y="142.0">i..</text>
</g>
<g>
<title>unlock_page (6 samples, 0.30%)</title><rect x="1184.7" y="131.0" width="3.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1187.7" y="142.0"></text>
</g>
<g>
<title>wait_for_stable_page (1 samples, 0.05%)</title><rect x="1188.2" y="131.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1191.2" y="142.0"></text>
</g>
<g>
<title>start_thread (2 samples, 0.10%)</title><rect x="1188.8" y="627.0" width="1.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1191.8" y="638.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.10%)</title><rect x="1188.8" y="611.0" width="1.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1191.8" y="622.0"></text>
</g>
<g>
<title>Thread::call_run() (2 samples, 0.10%)</title><rect x="1188.8" y="595.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.8" y="606.0"></text>
</g>
<g>
<title>JavaThread::run() (2 samples, 0.10%)</title><rect x="1188.8" y="579.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.8" y="590.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (2 samples, 0.10%)</title><rect x="1188.8" y="563.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.8" y="574.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (2 samples, 0.10%)</title><rect x="1188.8" y="547.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.8" y="558.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (2 samples, 0.10%)</title><rect x="1188.8" y="531.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.8" y="542.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (2 samples, 0.10%)</title><rect x="1188.8" y="515.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.8" y="526.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (2 samples, 0.10%)</title><rect x="1188.8" y="499.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.8" y="510.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.05%)</title><rect x="1188.8" y="483.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.8" y="494.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.05%)</title><rect x="1188.8" y="467.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.8" y="478.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.05%)</title><rect x="1188.8" y="451.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.8" y="462.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.05%)</title><rect x="1188.8" y="435.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.8" y="446.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (1 samples, 0.05%)</title><rect x="1189.4" y="483.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1192.4" y="494.0"></text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (1 samples, 0.05%)</title><rect x="1189.4" y="467.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1192.4" y="478.0"></text>
</g>
</g>
</svg>
