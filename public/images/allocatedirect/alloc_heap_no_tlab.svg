<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="485"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="485"> </text>
<g id="frames">
<g>
<title>all (2,999 samples, 100.00%)</title><rect x="10.0" y="451.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="462.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (67 samples, 2.23%)</title><rect x="10.0" y="435.0" width="26.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="446.0">[..</text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (20 samples, 0.67%)</title><rect x="10.0" y="419.0" width="7.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (37 samples, 1.23%)</title><rect x="17.9" y="419.0" width="14.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="20.9" y="430.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (10 samples, 0.33%)</title><rect x="32.4" y="419.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="35.4" y="430.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="36.4" y="435.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="39.4" y="446.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.03%)</title><rect x="36.4" y="419.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="39.4" y="430.0"></text>
</g>
<g>
<title>[unknown_Java] (217 samples, 7.24%)</title><rect x="36.8" y="435.0" width="85.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="39.8" y="446.0">[unknown_J..</text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (7 samples, 0.23%)</title><rect x="36.8" y="419.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="39.8" y="430.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (65 samples, 2.17%)</title><rect x="39.5" y="419.0" width="25.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="42.5" y="430.0">O..</text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (58 samples, 1.93%)</title><rect x="39.5" y="403.0" width="22.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="42.5" y="414.0">C..</text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (7 samples, 0.23%)</title><rect x="62.3" y="403.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="65.3" y="414.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (123 samples, 4.10%)</title><rect x="65.1" y="419.0" width="48.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="68.1" y="430.0">Opto..</text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (55 samples, 1.83%)</title><rect x="80.4" y="403.0" width="21.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="83.4" y="414.0">C..</text>
</g>
<g>
<title>G1CardTable::is_in_young(oopDesc*) const (22 samples, 0.73%)</title><rect x="102.1" y="403.0" width="8.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="105.1" y="414.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (6 samples, 0.20%)</title><rect x="110.7" y="403.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="113.7" y="414.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="113.1" y="403.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="116.1" y="414.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="113.1" y="387.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="116.1" y="398.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="113.1" y="371.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="116.1" y="382.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.03%)</title><rect x="113.1" y="355.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="116.1" y="366.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (22 samples, 0.73%)</title><rect x="113.5" y="419.0" width="8.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="116.5" y="430.0"></text>
</g>
<g>
<title>java/lang/Thread.run (2,703 samples, 90.13%)</title><rect x="122.1" y="435.0" width="1063.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="125.1" y="446.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (2,703 samples, 90.13%)</title><rect x="122.1" y="419.0" width="1063.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="125.1" y="430.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (2,703 samples, 90.13%)</title><rect x="122.1" y="403.0" width="1063.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="125.1" y="414.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (2,703 samples, 90.13%)</title><rect x="122.1" y="387.0" width="1063.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="125.1" y="398.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>java/util/concurrent/Executors$RunnableAdapter.call (2,703 samples, 90.13%)</title><rect x="122.1" y="371.0" width="1063.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="125.1" y="382.0">java/util/concurrent/Executors$RunnableAdapter.call</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (2,703 samples, 90.13%)</title><rect x="122.1" y="355.0" width="1063.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="125.1" y="366.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call (2,703 samples, 90.13%)</title><rect x="122.1" y="339.0" width="1063.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="125.1" y="350.0">org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call</text>
</g>
<g>
<title>org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call (2,703 samples, 90.13%)</title><rect x="122.1" y="323.0" width="1063.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="125.1" y="334.0">org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call</text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (2,703 samples, 90.13%)</title><rect x="122.1" y="307.0" width="1063.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="125.1" y="318.0">java/lang/reflect/Method.invoke</text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (2,703 samples, 90.13%)</title><rect x="122.1" y="291.0" width="1063.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="125.1" y="302.0">jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke</text>
</g>
<g>
<title>jdk/internal/reflect/NativeMethodAccessorImpl.invoke (2,703 samples, 90.13%)</title><rect x="122.1" y="275.0" width="1063.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="125.1" y="286.0">jdk/internal/reflect/NativeMethodAccessorImpl.invoke</text>
</g>
<g>
<title>jdk/internal/reflect/NativeMethodAccessorImpl.invoke0 (2,703 samples, 90.13%)</title><rect x="122.1" y="259.0" width="1063.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="125.1" y="270.0">jdk/internal/reflect/NativeMethodAccessorImpl.invoke0</text>
</g>
<g>
<title>me/serce/jmh_generated/AllocateBuffer2_heap_jmhTest.heap_AverageTime (2,703 samples, 90.13%)</title><rect x="122.1" y="243.0" width="1063.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="125.1" y="254.0">me/serce/jmh_generated/AllocateBuffer2_heap_jmhTest.heap_AverageTime</text>
</g>
<g>
<title>me/serce/jmh_generated/AllocateBuffer2_heap_jmhTest.heap_avgt_jmhStub (2,703 samples, 90.13%)</title><rect x="122.1" y="227.0" width="1063.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="125.1" y="238.0">me/serce/jmh_generated/AllocateBuffer2_heap_jmhTest.heap_avgt_jmhStub</text>
</g>
<g id="myid">
<title>me/serce/AllocateBuffer2.heap (2,650 samples, 88.36%)</title><rect x="125.7" y="211.0" width="1042.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="128.7" y="222.0">me/serce/AllocateBuffer2.heap</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (2,650 samples, 88.36%)</title><rect x="125.7" y="195.0" width="1042.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="128.7" y="206.0">java/nio/ByteBuffer.allocate</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (10 samples, 0.33%)</title><rect x="143.0" y="179.0" width="3.9" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="146.0" y="190.0"></text>
</g>
<g>
<title>ClassLoaderData::holder_phantom() const (11 samples, 0.37%)</title><rect x="146.9" y="179.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="149.9" y="190.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (15 samples, 0.50%)</title><rect x="151.3" y="179.0" width="5.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="154.3" y="190.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (8 samples, 0.27%)</title><rect x="157.2" y="179.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="160.2" y="190.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (34 samples, 1.13%)</title><rect x="160.3" y="179.0" width="13.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="163.3" y="190.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (978 samples, 32.61%)</title><rect x="173.7" y="179.0" width="384.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="176.7" y="190.0">OptoRuntime::new_instance_C(Klass*, JavaThread*)</text>
</g>
<g>
<title>ClassLoaderData::holder_phantom() const (6 samples, 0.20%)</title><rect x="241.0" y="163.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="244.0" y="174.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (793 samples, 26.44%)</title><rect x="243.3" y="163.0" width="312.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="246.3" y="174.0">InstanceKlass::allocate_instance(Thread*)</text>
</g>
<g>
<title>AllocTracer::send_allocation_outside_tlab(Klass*, HeapWordImpl**, unsigned long, Thread*) (10 samples, 0.33%)</title><rect x="262.6" y="147.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="265.6" y="158.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (8 samples, 0.27%)</title><rect x="266.5" y="147.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="269.5" y="158.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (8 samples, 0.27%)</title><rect x="269.7" y="147.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="272.7" y="158.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (692 samples, 23.07%)</title><rect x="272.8" y="147.0" width="272.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="275.8" y="158.0">MemAllocator::allocate() const</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (25 samples, 0.83%)</title><rect x="343.7" y="131.0" width="9.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="346.7" y="142.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (44 samples, 1.47%)</title><rect x="353.5" y="131.0" width="17.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="356.5" y="142.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_outside_tlab(Klass*, HeapWordImpl**, unsigned long, Thread*) (89 samples, 2.97%)</title><rect x="370.8" y="131.0" width="35.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="373.8" y="142.0">All..</text>
</g>
<g>
<title>JfrAllocationTracer::JfrAllocationTracer(HeapWordImpl**, unsigned long, Thread*) (32 samples, 1.07%)</title><rect x="383.4" y="115.0" width="12.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="386.4" y="126.0"></text>
</g>
<g>
<title>LeakProfiler::is_running() (7 samples, 0.23%)</title><rect x="393.2" y="99.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="396.2" y="110.0"></text>
</g>
<g>
<title>JfrAllocationTracer::~JfrAllocationTracer() (9 samples, 0.30%)</title><rect x="396.0" y="115.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="399.0" y="126.0"></text>
</g>
<g>
<title>LeakProfiler::is_running() (2 samples, 0.07%)</title><rect x="399.5" y="115.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="402.5" y="126.0"></text>
</g>
<g>
<title>ObjectSampler::is_created() (14 samples, 0.47%)</title><rect x="400.3" y="115.0" width="5.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="403.3" y="126.0"></text>
</g>
<g>
<title>G1CardTable::g1_mark_as_young(MemRegion const&amp;) (13 samples, 0.43%)</title><rect x="405.8" y="131.0" width="5.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="408.8" y="142.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (224 samples, 7.47%)</title><rect x="410.9" y="131.0" width="88.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="413.9" y="142.0">G1Collecte..</text>
</g>
<g>
<title>G1CardTable::g1_mark_as_young(MemRegion const&amp;) (5 samples, 0.17%)</title><rect x="497.1" y="115.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="500.1" y="126.0"></text>
</g>
<g>
<title>JfrAllocationTracer::JfrAllocationTracer(HeapWordImpl**, unsigned long, Thread*) (9 samples, 0.30%)</title><rect x="499.1" y="131.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="502.1" y="142.0"></text>
</g>
<g>
<title>JfrAllocationTracer::~JfrAllocationTracer() (9 samples, 0.30%)</title><rect x="502.6" y="131.0" width="3.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="505.6" y="142.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (21 samples, 0.70%)</title><rect x="506.2" y="131.0" width="8.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="509.2" y="142.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWordImpl**) const (63 samples, 2.10%)</title><rect x="514.4" y="131.0" width="24.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="517.4" y="142.0">O..</text>
</g>
<g>
<title>__tls_get_addr (5 samples, 0.17%)</title><rect x="539.2" y="131.0" width="2.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="542.2" y="142.0"></text>
</g>
<g>
<title>memset@plt (10 samples, 0.33%)</title><rect x="541.2" y="131.0" width="3.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="544.2" y="142.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWordImpl**) const (3 samples, 0.10%)</title><rect x="545.1" y="147.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="548.1" y="158.0"></text>
</g>
<g>
<title>__tls_get_addr (19 samples, 0.63%)</title><rect x="546.3" y="147.0" width="7.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="549.3" y="158.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (4 samples, 0.13%)</title><rect x="553.8" y="147.0" width="1.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="556.8" y="158.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (8 samples, 0.27%)</title><rect x="555.3" y="163.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="558.3" y="174.0"></text>
</g>
<g>
<title>[unknown] (62 samples, 2.07%)</title><rect x="558.5" y="179.0" width="24.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="561.5" y="190.0">[..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (62 samples, 2.07%)</title><rect x="558.5" y="163.0" width="24.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="561.5" y="174.0">/..</text>
</g>
<g>
<title>_new_array_Java (39 samples, 1.30%)</title><rect x="582.9" y="179.0" width="15.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="585.9" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1,449 samples, 48.32%)</title><rect x="598.2" y="179.0" width="570.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="601.2" y="190.0">java/nio/HeapByteBuffer.&lt;init&gt;</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (12 samples, 0.40%)</title><rect x="602.6" y="163.0" width="4.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="605.6" y="174.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1,308 samples, 43.61%)</title><rect x="607.3" y="163.0" width="514.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="610.3" y="174.0">OptoRuntime::new_array_C(Klass*, int, JavaThread*)</text>
</g>
<g>
<title>Klass::check_array_allocation_length(int, int, Thread*) (7 samples, 0.23%)</title><rect x="727.7" y="147.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="730.7" y="158.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.10%)</title><rect x="730.4" y="147.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="733.4" y="158.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (986 samples, 32.88%)</title><rect x="731.6" y="147.0" width="388.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="734.6" y="158.0">TypeArrayKlass::allocate_common(int, bool, Thread*)</text>
</g>
<g>
<title>AllocTracer::send_allocation_outside_tlab(Klass*, HeapWordImpl**, unsigned long, Thread*) (5 samples, 0.17%)</title><rect x="772.1" y="131.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="775.1" y="142.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (10 samples, 0.33%)</title><rect x="774.1" y="131.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="777.1" y="142.0"></text>
</g>
<g>
<title>Klass::check_array_allocation_length(int, int, Thread*) (26 samples, 0.87%)</title><rect x="778.0" y="131.0" width="10.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="781.0" y="142.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (8 samples, 0.27%)</title><rect x="788.3" y="131.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="791.3" y="142.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (812 samples, 27.08%)</title><rect x="791.4" y="131.0" width="319.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="794.4" y="142.0">MemAllocator::allocate() const</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (16 samples, 0.53%)</title><rect x="850.8" y="115.0" width="6.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="853.8" y="126.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (110 samples, 3.67%)</title><rect x="857.1" y="115.0" width="43.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="860.1" y="126.0">/usr..</text>
</g>
<g>
<title>AllocTracer::send_allocation_outside_tlab(Klass*, HeapWordImpl**, unsigned long, Thread*) (115 samples, 3.83%)</title><rect x="900.4" y="115.0" width="45.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="903.4" y="126.0">Allo..</text>
</g>
<g>
<title>JfrAllocationTracer::JfrAllocationTracer(HeapWordImpl**, unsigned long, Thread*) (22 samples, 0.73%)</title><rect x="923.2" y="99.0" width="8.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="926.2" y="110.0"></text>
</g>
<g>
<title>JfrAllocationTracer::~JfrAllocationTracer() (9 samples, 0.30%)</title><rect x="931.9" y="99.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="934.9" y="110.0"></text>
</g>
<g>
<title>LeakProfiler::is_running() (6 samples, 0.20%)</title><rect x="935.4" y="99.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="938.4" y="110.0"></text>
</g>
<g>
<title>ObjectSampler::is_created() (20 samples, 0.67%)</title><rect x="937.8" y="99.0" width="7.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="940.8" y="110.0"></text>
</g>
<g>
<title>G1CardTable::g1_mark_as_young(MemRegion const&amp;) (21 samples, 0.70%)</title><rect x="945.7" y="115.0" width="8.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="948.7" y="126.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (235 samples, 7.84%)</title><rect x="953.9" y="115.0" width="92.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="956.9" y="126.0">G1Collected..</text>
</g>
<g>
<title>G1CardTable::g1_mark_as_young(MemRegion const&amp;) (5 samples, 0.17%)</title><rect x="1043.2" y="99.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1046.2" y="110.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (3 samples, 0.10%)</title><rect x="1045.2" y="99.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1048.2" y="110.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (3 samples, 0.10%)</title><rect x="1045.2" y="83.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1048.2" y="94.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (2 samples, 0.07%)</title><rect x="1045.2" y="67.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1048.2" y="78.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (2 samples, 0.07%)</title><rect x="1045.2" y="51.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1048.2" y="62.0"></text>
</g>
<g>
<title>G1Analytics::predict_young_other_time_ms(unsigned long) const (1 samples, 0.03%)</title><rect x="1045.2" y="35.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1048.2" y="46.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (1 samples, 0.03%)</title><rect x="1045.6" y="35.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1048.6" y="46.0"></text>
</g>
<g>
<title>G1MonitoringSupport::update_eden_size() (1 samples, 0.03%)</title><rect x="1046.0" y="67.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1049.0" y="78.0"></text>
</g>
<g>
<title>JfrAllocationTracer::JfrAllocationTracer(HeapWordImpl**, unsigned long, Thread*) (5 samples, 0.17%)</title><rect x="1046.4" y="115.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1049.4" y="126.0"></text>
</g>
<g>
<title>JfrAllocationTracer::~JfrAllocationTracer() (4 samples, 0.13%)</title><rect x="1048.4" y="115.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1051.4" y="126.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (27 samples, 0.90%)</title><rect x="1049.9" y="115.0" width="10.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1052.9" y="126.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWordImpl**) const (113 samples, 3.77%)</title><rect x="1060.6" y="115.0" width="44.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1063.6" y="126.0">ObjA..</text>
</g>
<g>
<title>__tls_get_addr (8 samples, 0.27%)</title><rect x="1105.0" y="115.0" width="3.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1108.0" y="126.0"></text>
</g>
<g>
<title>memset@plt (7 samples, 0.23%)</title><rect x="1108.2" y="115.0" width="2.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1111.2" y="126.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWordImpl**) const (6 samples, 0.20%)</title><rect x="1110.9" y="131.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1113.9" y="142.0"></text>
</g>
<g>
<title>__tls_get_addr (15 samples, 0.50%)</title><rect x="1113.3" y="131.0" width="5.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1116.3" y="142.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (1 samples, 0.03%)</title><rect x="1119.2" y="131.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1122.2" y="142.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="1119.6" y="147.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1122.6" y="158.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="1119.6" y="131.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1122.6" y="142.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="1119.6" y="115.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1122.6" y="126.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.03%)</title><rect x="1119.6" y="99.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1122.6" y="110.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray(BasicType, int, Thread*) (5 samples, 0.17%)</title><rect x="1120.0" y="147.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1123.0" y="158.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (25 samples, 0.83%)</title><rect x="1121.9" y="163.0" width="9.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1124.9" y="174.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.17%)</title><rect x="1131.8" y="163.0" width="1.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1134.8" y="174.0"></text>
</g>
<g>
<title>[unknown] (50 samples, 1.67%)</title><rect x="1133.7" y="163.0" width="19.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1136.7" y="174.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (50 samples, 1.67%)</title><rect x="1133.7" y="147.0" width="19.7" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1136.7" y="158.0"></text>
</g>
<g>
<title>_new_instance_Java (24 samples, 0.80%)</title><rect x="1153.4" y="163.0" width="9.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1156.4" y="174.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray(BasicType, int, Thread*) (14 samples, 0.47%)</title><rect x="1162.9" y="163.0" width="5.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.9" y="174.0"></text>
</g>
<g>
<title>org/openjdk/jmh/infra/Blackhole.consume (44 samples, 1.47%)</title><rect x="1168.4" y="211.0" width="17.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1171.4" y="222.0"></text>
</g>
<g>
<title>start_thread (11 samples, 0.37%)</title><rect x="1185.7" y="435.0" width="4.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1188.7" y="446.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (11 samples, 0.37%)</title><rect x="1185.7" y="419.0" width="4.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1188.7" y="430.0"></text>
</g>
<g>
<title>Thread::call_run() (11 samples, 0.37%)</title><rect x="1185.7" y="403.0" width="4.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.7" y="414.0"></text>
</g>
<g>
<title>GangWorker::loop() (8 samples, 0.27%)</title><rect x="1185.7" y="387.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.7" y="398.0"></text>
</g>
<g>
<title>G1EvacuateRegionsBaseTask::work(unsigned int) (4 samples, 0.13%)</title><rect x="1185.7" y="371.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.7" y="382.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int, G1GCPhaseTimes::GCParPhases, G1GCPhaseTimes::GCParPhases, G1GCPhaseTimes::GCParPhases) (4 samples, 0.13%)</title><rect x="1185.7" y="355.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.7" y="366.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_incremental_part_from(HeapRegionClosure*, unsigned int, unsigned int) const (4 samples, 0.13%)</title><rect x="1185.7" y="339.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.7" y="350.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (4 samples, 0.13%)</title><rect x="1185.7" y="323.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.7" y="334.0"></text>
</g>
<g>
<title>G1EvacPhaseWithTrimTimeTracker::~G1EvacPhaseWithTrimTimeTracker() (1 samples, 0.03%)</title><rect x="1186.9" y="307.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.9" y="318.0"></text>
</g>
<g>
<title>CompositeElapsedCounterSource::now() (1 samples, 0.03%)</title><rect x="1186.9" y="291.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.9" y="302.0"></text>
</g>
<g>
<title>os::elapsed_counter() (1 samples, 0.03%)</title><rect x="1186.9" y="275.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.9" y="286.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::work(unsigned int) (3 samples, 0.10%)</title><rect x="1187.2" y="371.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.2" y="382.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate(HeapRegionClosure*) const (1 samples, 0.03%)</title><rect x="1187.2" y="355.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.2" y="366.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::G1SerialFreeCollectionSetClosure::do_heap_region(HeapRegion*) (1 samples, 0.03%)</title><rect x="1187.2" y="339.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.2" y="350.0"></text>
</g>
<g>
<title>HeapRegionRemSet::clear_locked(bool) (2 samples, 0.07%)</title><rect x="1187.6" y="355.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.6" y="366.0"></text>
</g>
<g>
<title>G1CodeRootSet::clear() (1 samples, 0.03%)</title><rect x="1188.0" y="339.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.0" y="350.0"></text>
</g>
<g>
<title>void WeakProcessor::Task::work&lt;G1STWIsAliveClosure, G1KeepAliveClosure&gt;(unsigned int, G1STWIsAliveClosure*, G1KeepAliveClosure*) (1 samples, 0.03%)</title><rect x="1188.4" y="371.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.4" y="382.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.10%)</title><rect x="1188.8" y="387.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.8" y="398.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.10%)</title><rect x="1188.8" y="371.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.8" y="382.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.63] (3 samples, 0.10%)</title><rect x="1188.8" y="355.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.8" y="366.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (3 samples, 0.10%)</title><rect x="1188.8" y="339.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.8" y="350.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (3 samples, 0.10%)</title><rect x="1188.8" y="323.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.8" y="334.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (3 samples, 0.10%)</title><rect x="1188.8" y="307.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.8" y="318.0"></text>
</g>
<g>
<title>G1CollectedHeap::post_evacuate_collection_set(G1EvacuationInfo&amp;, G1ParScanThreadStateSet*) (2 samples, 0.07%)</title><rect x="1188.8" y="291.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.8" y="302.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(G1CollectionSet*, G1EvacuationInfo&amp;, unsigned long const*) (1 samples, 0.03%)</title><rect x="1188.8" y="275.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.8" y="286.0"></text>
</g>
<g>
<title>FreeRegionList::add_ordered(FreeRegionList*) (1 samples, 0.03%)</title><rect x="1188.8" y="259.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.8" y="270.0"></text>
</g>
<g>
<title>WeakProcessor::Task::Task(WeakProcessorPhaseTimes*, unsigned int) (1 samples, 0.03%)</title><rect x="1189.2" y="275.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.2" y="286.0"></text>
</g>
<g>
<title>OopStorage::BasicParState::BasicParState(OopStorage const*, unsigned int, bool) (1 samples, 0.03%)</title><rect x="1189.2" y="259.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1192.2" y="270.0"></text>
</g>
<g>
<title>G1GCPhaseTimes::print() (1 samples, 0.03%)</title><rect x="1189.6" y="291.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.6" y="302.0"></text>
</g>
<g>
<title>G1GCPhaseTimes::print_post_evacuate_collection_set() const (1 samples, 0.03%)</title><rect x="1189.6" y="275.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1192.6" y="286.0"></text>
</g>
<g>
<title>ReferenceProcessorPhaseTimes::print_all_references(unsigned int, bool) const (1 samples, 0.03%)</title><rect x="1189.6" y="259.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1192.6" y="270.0"></text>
</g>
<g>
<title>outputStream::print_cr(char const*, ...) (1 samples, 0.03%)</title><rect x="1189.6" y="243.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1192.6" y="254.0"></text>
</g>
<g>
<title>outputStream::do_vsnprintf_and_write_with_automatic_buffer(char const*, __va_list_tag*, bool) (1 samples, 0.03%)</title><rect x="1189.6" y="227.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1192.6" y="238.0"></text>
</g>
<g>
<title>LogStream::write(char const*, unsigned long) (1 samples, 0.03%)</title><rect x="1189.6" y="211.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1192.6" y="222.0"></text>
</g>
<g>
<title>LogTargetHandle::print(char const*, ...) (1 samples, 0.03%)</title><rect x="1189.6" y="195.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1192.6" y="206.0"></text>
</g>
</g>
<script>
	window.addEventListener('load', function(){ zoom(document.getElementById('myid')) })
</script>
</svg>
