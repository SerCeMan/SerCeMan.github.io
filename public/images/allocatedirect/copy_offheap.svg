<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" onload="init(evt)" viewBox="0 0 1200 726" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="709"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="709"> </text>
<g id="frames">
<g>
<title>all (1,701 samples, 100.00%)</title><rect x="10.0" y="675.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="686.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="10.0" y="659.0" width="0.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>open64 (1 samples, 0.06%)</title><rect x="10.0" y="643.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.06%)</title><rect x="10.0" y="627.0" width="0.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.06%)</title><rect x="10.0" y="611.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>__x64_sys_openat (1 samples, 0.06%)</title><rect x="10.0" y="595.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>do_sys_open (1 samples, 0.06%)</title><rect x="10.0" y="579.0" width="0.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>do_filp_open (1 samples, 0.06%)</title><rect x="10.0" y="563.0" width="0.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>path_openat (1 samples, 0.06%)</title><rect x="10.0" y="547.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>do_last (1 samples, 0.06%)</title><rect x="10.0" y="531.0" width="0.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>vfs_open (1 samples, 0.06%)</title><rect x="10.0" y="515.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>errseq_sample (1 samples, 0.06%)</title><rect x="10.0" y="499.0" width="0.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1,690 samples, 99.35%)</title><rect x="10.7" y="659.0" width="1172.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.7" y="670.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1,690 samples, 99.35%)</title><rect x="10.7" y="643.0" width="1172.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.7" y="654.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1,690 samples, 99.35%)</title><rect x="10.7" y="627.0" width="1172.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.7" y="638.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (1,690 samples, 99.35%)</title><rect x="10.7" y="611.0" width="1172.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.7" y="622.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>java/util/concurrent/Executors$RunnableAdapter.call (1,690 samples, 99.35%)</title><rect x="10.7" y="595.0" width="1172.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.7" y="606.0">java/util/concurrent/Executors$RunnableAdapter.call</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (1,690 samples, 99.35%)</title><rect x="10.7" y="579.0" width="1172.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.7" y="590.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call (1,690 samples, 99.35%)</title><rect x="10.7" y="563.0" width="1172.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.7" y="574.0">org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call</text>
</g>
<g>
<title>org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call (1,690 samples, 99.35%)</title><rect x="10.7" y="547.0" width="1172.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.7" y="558.0">org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call</text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1,690 samples, 99.35%)</title><rect x="10.7" y="531.0" width="1172.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="13.7" y="542.0">java/lang/reflect/Method.invoke</text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1,690 samples, 99.35%)</title><rect x="10.7" y="515.0" width="1172.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.7" y="526.0">jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke</text>
</g>
<g>
<title>jdk/internal/reflect/NativeMethodAccessorImpl.invoke (1,690 samples, 99.35%)</title><rect x="10.7" y="499.0" width="1172.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.7" y="510.0">jdk/internal/reflect/NativeMethodAccessorImpl.invoke</text>
</g>
<g>
<title>jdk/internal/reflect/NativeMethodAccessorImpl.invoke0 (1,690 samples, 99.35%)</title><rect x="10.7" y="483.0" width="1172.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.7" y="494.0">jdk/internal/reflect/NativeMethodAccessorImpl.invoke0</text>
</g>
<g>
<title>me/serce/jmh_generated/CopyFileBenchmark_copyFiles_jmhTest.copyFiles_AverageTime (1,690 samples, 99.35%)</title><rect x="10.7" y="467.0" width="1172.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.7" y="478.0">me/serce/jmh_generated/CopyFileBenchmark_copyFiles_jmhTest.copyFiles_AverageTime</text>
</g>
<g>
<title>me/serce/jmh_generated/CopyFileBenchmark_copyFiles_jmhTest.copyFiles_avgt_jmhStub (1,690 samples, 99.35%)</title><rect x="10.7" y="451.0" width="1172.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="13.7" y="462.0">me/serce/jmh_generated/CopyFileBenchmark_copyFiles_jmhTest.copyFiles_avgt_jmhStub</text>
</g>
<g>
<title>me/serce/CopyFileBenchmark.copyFiles (1,690 samples, 99.35%)</title><rect x="10.7" y="435.0" width="1172.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.7" y="446.0">me/serce/CopyFileBenchmark.copyFiles</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.write (1,690 samples, 99.35%)</title><rect x="10.7" y="419.0" width="1172.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.7" y="430.0">sun/nio/ch/FileChannelImpl.write</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1,690 samples, 99.35%)</title><rect x="10.7" y="403.0" width="1172.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="13.7" y="414.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (1,690 samples, 99.35%)</title><rect x="10.7" y="387.0" width="1172.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.7" y="398.0">sun/nio/ch/IOUtil.writeFromNativeBuffer</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (1,690 samples, 99.35%)</title><rect x="10.7" y="371.0" width="1172.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.7" y="382.0">sun/nio/ch/FileDispatcherImpl.write</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (1,690 samples, 99.35%)</title><rect x="10.7" y="355.0" width="1172.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="13.7" y="366.0">sun/nio/ch/FileDispatcherImpl.write0</text>
</g>
<g>
<title>__libc_write (1,690 samples, 99.35%)</title><rect x="10.7" y="339.0" width="1172.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="13.7" y="350.0">__libc_write</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1,690 samples, 99.35%)</title><rect x="10.7" y="323.0" width="1172.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="13.7" y="334.0">entry_SYSCALL_64_after_hwframe</text>
</g>
<g>
<title>do_syscall_64 (1,690 samples, 99.35%)</title><rect x="10.7" y="307.0" width="1172.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="13.7" y="318.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_write (1,690 samples, 99.35%)</title><rect x="10.7" y="291.0" width="1172.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="13.7" y="302.0">__x64_sys_write</text>
</g>
<g>
<title>ksys_write (1,690 samples, 99.35%)</title><rect x="10.7" y="275.0" width="1172.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="13.7" y="286.0">ksys_write</text>
</g>
<g>
<title>vfs_write (1,690 samples, 99.35%)</title><rect x="10.7" y="259.0" width="1172.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="13.7" y="270.0">vfs_write</text>
</g>
<g>
<title>__vfs_write (1,690 samples, 99.35%)</title><rect x="10.7" y="243.0" width="1172.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="13.7" y="254.0">__vfs_write</text>
</g>
<g>
<title>new_sync_write (1,690 samples, 99.35%)</title><rect x="10.7" y="227.0" width="1172.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="13.7" y="238.0">new_sync_write</text>
</g>
<g>
<title>ext4_file_write_iter (1,690 samples, 99.35%)</title><rect x="10.7" y="211.0" width="1172.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="13.7" y="222.0">ext4_file_write_iter</text>
</g>
<g>
<title>__generic_file_write_iter (1,690 samples, 99.35%)</title><rect x="10.7" y="195.0" width="1172.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="13.7" y="206.0">__generic_file_write_iter</text>
</g>
<g>
<title>__x86_indirect_thunk_r11 (1 samples, 0.06%)</title><rect x="10.7" y="179.0" width="0.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="13.7" y="190.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (2 samples, 0.12%)</title><rect x="11.4" y="179.0" width="1.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="14.4" y="190.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.06%)</title><rect x="12.8" y="179.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="15.8" y="190.0"></text>
</g>
<g>
<title>ext4_da_write_begin (7 samples, 0.41%)</title><rect x="13.5" y="179.0" width="4.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="16.5" y="190.0"></text>
</g>
<g>
<title>ext4_da_write_end (15 samples, 0.88%)</title><rect x="18.3" y="179.0" width="10.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="21.3" y="190.0"></text>
</g>
<g>
<title>generic_perform_write (1,663 samples, 97.77%)</title><rect x="28.7" y="179.0" width="1153.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="31.7" y="190.0">generic_perform_write</text>
</g>
<g>
<title>_cond_resched (5 samples, 0.29%)</title><rect x="40.5" y="163.0" width="3.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="43.5" y="174.0"></text>
</g>
<g>
<title>balance_dirty_pages_ratelimited (5 samples, 0.29%)</title><rect x="44.0" y="163.0" width="3.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="47.0" y="174.0"></text>
</g>
<g>
<title>copyin (2 samples, 0.12%)</title><rect x="47.5" y="163.0" width="1.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="50.5" y="174.0"></text>
</g>
<g>
<title>ext4_da_write_begin (257 samples, 15.11%)</title><rect x="48.8" y="163.0" width="178.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="51.8" y="174.0">ext4_da_write_begin</text>
</g>
<g>
<title>__ext4_journal_start_sb (104 samples, 6.11%)</title><rect x="66.2" y="147.0" width="72.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="69.2" y="158.0">__ext4_j..</text>
</g>
<g>
<title>ext4_journal_check_start (1 samples, 0.06%)</title><rect x="69.7" y="131.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="72.7" y="142.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.06%)</title><rect x="69.7" y="115.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="72.7" y="126.0"></text>
</g>
<g>
<title>jbd2__journal_start (97 samples, 5.70%)</title><rect x="70.4" y="131.0" width="67.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="73.4" y="142.0">jbd2__j..</text>
</g>
<g>
<title>_raw_read_lock (8 samples, 0.47%)</title><rect x="77.3" y="115.0" width="5.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="80.3" y="126.0"></text>
</g>
<g>
<title>add_transaction_credits (1 samples, 0.06%)</title><rect x="82.8" y="115.0" width="0.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="85.8" y="126.0"></text>
</g>
<g>
<title>kmem_cache_alloc (15 samples, 0.88%)</title><rect x="83.5" y="115.0" width="10.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="86.5" y="126.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.06%)</title><rect x="93.2" y="99.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="96.2" y="110.0"></text>
</g>
<g>
<title>memcg_kmem_put_cache (1 samples, 0.06%)</title><rect x="93.9" y="115.0" width="0.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="96.9" y="126.0"></text>
</g>
<g>
<title>memset_erms (7 samples, 0.41%)</title><rect x="94.6" y="115.0" width="4.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="97.6" y="126.0"></text>
</g>
<g>
<title>should_failslab (1 samples, 0.06%)</title><rect x="99.5" y="115.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="102.5" y="126.0"></text>
</g>
<g>
<title>start_this_handle (54 samples, 3.17%)</title><rect x="100.2" y="115.0" width="37.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="103.2" y="126.0">sta..</text>
</g>
<g>
<title>add_transaction_credits (15 samples, 0.88%)</title><rect x="127.2" y="99.0" width="10.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="130.2" y="110.0"></text>
</g>
<g>
<title>kmem_cache_alloc (1 samples, 0.06%)</title><rect x="137.6" y="131.0" width="0.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="140.6" y="142.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.06%)</title><rect x="138.3" y="147.0" width="0.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="141.3" y="158.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.06%)</title><rect x="139.0" y="147.0" width="0.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="142.0" y="158.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.06%)</title><rect x="139.0" y="131.0" width="0.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="142.0" y="142.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.06%)</title><rect x="139.0" y="115.0" width="0.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="142.0" y="126.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.06%)</title><rect x="139.0" y="99.0" width="0.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="142.0" y="110.0"></text>
</g>
<g>
<title>ext4_block_write_begin (41 samples, 2.41%)</title><rect x="139.7" y="147.0" width="28.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="142.7" y="158.0">ex..</text>
</g>
<g>
<title>ext4_nonda_switch (5 samples, 0.29%)</title><rect x="168.2" y="147.0" width="3.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="171.2" y="158.0"></text>
</g>
<g>
<title>grab_cache_page_write_begin (77 samples, 4.53%)</title><rect x="171.6" y="147.0" width="53.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="174.6" y="158.0">grab_..</text>
</g>
<g>
<title>find_get_entry (1 samples, 0.06%)</title><rect x="171.6" y="131.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="174.6" y="142.0"></text>
</g>
<g>
<title>pagecache_get_page (74 samples, 4.35%)</title><rect x="172.3" y="131.0" width="51.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="175.3" y="142.0">pagec..</text>
</g>
<g>
<title>find_get_entry (56 samples, 3.29%)</title><rect x="184.1" y="115.0" width="38.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="187.1" y="126.0">fin..</text>
</g>
<g>
<title>PageHuge (2 samples, 0.12%)</title><rect x="198.7" y="99.0" width="1.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="201.7" y="110.0"></text>
</g>
<g>
<title>xas_load (28 samples, 1.65%)</title><rect x="200.1" y="99.0" width="19.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="203.1" y="110.0"></text>
</g>
<g>
<title>xas_start (5 samples, 0.29%)</title><rect x="219.5" y="99.0" width="3.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="222.5" y="110.0"></text>
</g>
<g>
<title>xas_load (1 samples, 0.06%)</title><rect x="223.0" y="115.0" width="0.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="226.0" y="126.0"></text>
</g>
<g>
<title>wait_for_stable_page (2 samples, 0.12%)</title><rect x="223.7" y="131.0" width="1.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="226.7" y="142.0"></text>
</g>
<g>
<title>pagecache_get_page (1 samples, 0.06%)</title><rect x="225.0" y="147.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="228.0" y="158.0"></text>
</g>
<g>
<title>wait_for_stable_page (2 samples, 0.12%)</title><rect x="225.7" y="147.0" width="1.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="228.7" y="158.0"></text>
</g>
<g>
<title>ext4_da_write_end (333 samples, 19.58%)</title><rect x="227.1" y="163.0" width="231.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="230.1" y="174.0">ext4_da_write_end</text>
</g>
<g>
<title>__ext4_journal_stop (79 samples, 4.64%)</title><rect x="231.3" y="147.0" width="54.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="234.3" y="158.0">__ext..</text>
</g>
<g>
<title>__wake_up (1 samples, 0.06%)</title><rect x="234.1" y="131.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="237.1" y="142.0"></text>
</g>
<g>
<title>jbd2_journal_stop (74 samples, 4.35%)</title><rect x="234.8" y="131.0" width="51.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="237.8" y="142.0">jbd2_..</text>
</g>
<g>
<title>__wake_up (32 samples, 1.88%)</title><rect x="249.3" y="115.0" width="22.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="252.3" y="126.0">_..</text>
</g>
<g>
<title>__lock_text_start (3 samples, 0.18%)</title><rect x="249.3" y="99.0" width="2.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="252.3" y="110.0"></text>
</g>
<g>
<title>__wake_up_common_lock (28 samples, 1.65%)</title><rect x="251.4" y="99.0" width="19.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="254.4" y="110.0"></text>
</g>
<g>
<title>__lock_text_start (20 samples, 1.18%)</title><rect x="252.8" y="83.0" width="13.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="255.8" y="94.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (6 samples, 0.35%)</title><rect x="266.7" y="83.0" width="4.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="269.7" y="94.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (1 samples, 0.06%)</title><rect x="270.8" y="99.0" width="0.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="273.8" y="110.0"></text>
</g>
<g>
<title>__wake_up_common_lock (1 samples, 0.06%)</title><rect x="271.5" y="115.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="274.5" y="126.0"></text>
</g>
<g>
<title>kmem_cache_free (20 samples, 1.18%)</title><rect x="272.2" y="115.0" width="13.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="275.2" y="126.0"></text>
</g>
<g>
<title>generic_write_end (243 samples, 14.29%)</title><rect x="286.1" y="147.0" width="168.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="289.1" y="158.0">generic_write_end</text>
</g>
<g>
<title>__block_commit_write.isra.0 (2 samples, 0.12%)</title><rect x="301.4" y="131.0" width="1.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="304.4" y="142.0"></text>
</g>
<g>
<title>block_write_end (219 samples, 12.87%)</title><rect x="302.7" y="131.0" width="152.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="305.7" y="142.0">block_write_end</text>
</g>
<g>
<title>__block_commit_write.isra.0 (216 samples, 12.70%)</title><rect x="304.8" y="115.0" width="149.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="307.8" y="126.0">__block_commit_writ..</text>
</g>
<g>
<title>mark_buffer_dirty (179 samples, 10.52%)</title><rect x="330.5" y="99.0" width="124.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="333.5" y="110.0">mark_buffer_dirty</text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.06%)</title><rect x="454.0" y="83.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="457.0" y="94.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.06%)</title><rect x="454.0" y="67.0" width="0.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="457.0" y="78.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.06%)</title><rect x="454.0" y="51.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="457.0" y="62.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.06%)</title><rect x="454.0" y="35.0" width="0.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="457.0" y="46.0"></text>
</g>
<g>
<title>jbd2_journal_stop (1 samples, 0.06%)</title><rect x="454.7" y="147.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="457.7" y="158.0"></text>
</g>
<g>
<title>unlock_page (4 samples, 0.24%)</title><rect x="455.4" y="147.0" width="2.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="458.4" y="158.0"></text>
</g>
<g>
<title>grab_cache_page_write_begin (1 samples, 0.06%)</title><rect x="458.1" y="163.0" width="0.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="461.1" y="174.0"></text>
</g>
<g>
<title>iov_iter_advance (17 samples, 1.00%)</title><rect x="458.8" y="163.0" width="11.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="461.8" y="174.0"></text>
</g>
<g>
<title>iov_iter_copy_from_user_atomic (825 samples, 48.50%)</title><rect x="470.6" y="163.0" width="572.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="473.6" y="174.0">iov_iter_copy_from_user_atomic</text>
</g>
<g>
<title>copy_user_enhanced_fast_string (813 samples, 47.80%)</title><rect x="477.6" y="147.0" width="563.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="480.6" y="158.0">copy_user_enhanced_fast_string</text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.06%)</title><rect x="1040.9" y="131.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1043.9" y="142.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.06%)</title><rect x="1040.9" y="115.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1043.9" y="126.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.06%)</title><rect x="1040.9" y="99.0" width="0.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1043.9" y="110.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.06%)</title><rect x="1040.9" y="83.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1043.9" y="94.0"></text>
</g>
<g>
<title>copyin (2 samples, 0.12%)</title><rect x="1041.5" y="147.0" width="1.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1044.5" y="158.0"></text>
</g>
<g>
<title>iov_iter_fault_in_readable (185 samples, 10.88%)</title><rect x="1042.9" y="163.0" width="128.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1045.9" y="174.0">iov_iter_fault_i..</text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.06%)</title><rect x="1170.6" y="147.0" width="0.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1173.6" y="158.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.06%)</title><rect x="1170.6" y="131.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1173.6" y="142.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.06%)</title><rect x="1170.6" y="115.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1173.6" y="126.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.06%)</title><rect x="1170.6" y="99.0" width="0.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1173.6" y="110.0"></text>
</g>
<g>
<title>rcu_all_qs (2 samples, 0.12%)</title><rect x="1171.3" y="163.0" width="1.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1174.3" y="174.0"></text>
</g>
<g>
<title>unlock_page (13 samples, 0.76%)</title><rect x="1172.7" y="163.0" width="9.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1175.7" y="174.0"></text>
</g>
<g>
<title>wait_for_stable_page (1 samples, 0.06%)</title><rect x="1181.7" y="163.0" width="0.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1184.7" y="174.0"></text>
</g>
<g>
<title>iov_iter_fault_in_readable (1 samples, 0.06%)</title><rect x="1182.4" y="179.0" width="0.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1185.4" y="190.0"></text>
</g>
<g>
<title>start_thread (10 samples, 0.59%)</title><rect x="1183.1" y="659.0" width="6.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1186.1" y="670.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (10 samples, 0.59%)</title><rect x="1183.1" y="643.0" width="6.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1186.1" y="654.0"></text>
</g>
<g>
<title>Thread::call_run() (10 samples, 0.59%)</title><rect x="1183.1" y="627.0" width="6.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.1" y="638.0"></text>
</g>
<g>
<title>JavaThread::run() (9 samples, 0.53%)</title><rect x="1183.1" y="611.0" width="6.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.1" y="622.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (9 samples, 0.53%)</title><rect x="1183.1" y="595.0" width="6.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.1" y="606.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (9 samples, 0.53%)</title><rect x="1183.1" y="579.0" width="6.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.1" y="590.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (9 samples, 0.53%)</title><rect x="1183.1" y="563.0" width="6.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.1" y="574.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (9 samples, 0.53%)</title><rect x="1183.1" y="547.0" width="6.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.1" y="558.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (4 samples, 0.24%)</title><rect x="1183.1" y="531.0" width="2.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.1" y="542.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.06%)</title><rect x="1183.1" y="515.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.1" y="526.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.06%)</title><rect x="1183.1" y="499.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.1" y="510.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.06%)</title><rect x="1183.1" y="483.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.1" y="494.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (3 samples, 0.18%)</title><rect x="1183.8" y="515.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.8" y="526.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.12%)</title><rect x="1183.8" y="499.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.8" y="510.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.06%)</title><rect x="1184.5" y="483.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.5" y="494.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.06%)</title><rect x="1184.5" y="467.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.5" y="478.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (1 samples, 0.06%)</title><rect x="1185.1" y="499.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.1" y="510.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.06%)</title><rect x="1185.1" y="483.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.1" y="494.0"></text>
</g>
<g>
<title>Compile::Optimize() (3 samples, 0.18%)</title><rect x="1185.8" y="531.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.8" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::optimize(PhaseIterGVN&amp;, LoopOptsMode) (3 samples, 0.18%)</title><rect x="1185.8" y="515.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.8" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (3 samples, 0.18%)</title><rect x="1185.8" y="499.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.8" y="510.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.06%)</title><rect x="1185.8" y="483.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.8" y="494.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.06%)</title><rect x="1185.8" y="467.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.8" y="478.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.06%)</title><rect x="1185.8" y="451.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.8" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_pre_post_loops(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.06%)</title><rect x="1185.8" y="435.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.8" y="446.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_post_loop(IdealLoopTree*, Node_List&amp;, CountedLoopNode*, CountedLoopEndNode*, Node*, Node*, CountedLoopNode*&amp;) (1 samples, 0.06%)</title><rect x="1185.8" y="419.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.8" y="430.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, PhaseIdealLoop::CloneLoopMode, Node*) (1 samples, 0.06%)</title><rect x="1185.8" y="403.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.8" y="414.0"></text>
</g>
<g>
<title>PhaseIterGVN::register_new_node_with_optimizer(Node*, Node*) (1 samples, 0.06%)</title><rect x="1185.8" y="387.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.8" y="398.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.06%)</title><rect x="1185.8" y="371.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.8" y="382.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.06%)</title><rect x="1185.8" y="355.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.8" y="366.0"></text>
</g>
<g>
<title>TypeAryPtr::make(TypePtr::PTR, ciObject*, TypeAry const*, ciKlass*, bool, int, int, TypePtr const*, int, bool) (1 samples, 0.06%)</title><rect x="1185.8" y="339.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.8" y="350.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.06%)</title><rect x="1185.8" y="323.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.8" y="334.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.06%)</title><rect x="1186.5" y="483.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.5" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.06%)</title><rect x="1187.2" y="483.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.2" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) [clone .part.112] (1 samples, 0.06%)</title><rect x="1187.2" y="467.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.2" y="478.0"></text>
</g>
<g>
<title>LoadNode::hash() const (1 samples, 0.06%)</title><rect x="1187.2" y="451.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.2" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.12%)</title><rect x="1187.9" y="531.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.9" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.12%)</title><rect x="1187.9" y="515.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.12%)</title><rect x="1187.9" y="499.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="1187.9" y="483.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="1187.9" y="467.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.06%)</title><rect x="1187.9" y="451.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.06%)</title><rect x="1187.9" y="435.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.9" y="446.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.06%)</title><rect x="1187.9" y="419.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.9" y="430.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.06%)</title><rect x="1187.9" y="403.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.9" y="414.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.06%)</title><rect x="1187.9" y="387.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.9" y="398.0"></text>
</g>
<g>
<title>G1BarrierSetC2::pre_barrier(GraphKit*, bool, Node*, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) const (1 samples, 0.06%)</title><rect x="1187.9" y="371.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.9" y="382.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.06%)</title><rect x="1187.9" y="355.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.9" y="366.0"></text>
</g>
<g>
<title>AddPNode::Ideal(PhaseGVN*, bool) (1 samples, 0.06%)</title><rect x="1187.9" y="339.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.9" y="350.0"></text>
</g>
<g>
<title>Parse::ensure_phis_everywhere() (1 samples, 0.06%)</title><rect x="1188.6" y="483.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.6" y="494.0"></text>
</g>
<g>
<title>Parse::ensure_memory_phi(int, bool) (1 samples, 0.06%)</title><rect x="1188.6" y="467.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.6" y="478.0"></text>
</g>
<g>
<title>PhiNode::make(Node*, Node*, Type const*, TypePtr const*) (1 samples, 0.06%)</title><rect x="1188.6" y="451.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.6" y="462.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.06%)</title><rect x="1188.6" y="435.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.6" y="446.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.06%)</title><rect x="1188.6" y="419.0" width="0.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1191.6" y="430.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.06%)</title><rect x="1189.3" y="611.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1192.3" y="622.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.06%)</title><rect x="1189.3" y="595.0" width="0.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1192.3" y="606.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.06%)</title><rect x="1189.3" y="579.0" width="0.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1192.3" y="590.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.06%)</title><rect x="1189.3" y="563.0" width="0.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1192.3" y="574.0"></text>
</g>
</g>
</svg>
