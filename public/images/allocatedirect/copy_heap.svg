<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" onload="init(evt)" viewBox="0 0 1200 678" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="661"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="661"> </text>
<g id="frames">
<g>
<title>all (2,157 samples, 100.00%)</title><rect x="10.0" y="627.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="638.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="10.0" y="611.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>pthread_cond_timedwait@@GLIBC_2.3.2 (1 samples, 0.05%)</title><rect x="10.0" y="595.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.05%)</title><rect x="10.0" y="579.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.05%)</title><rect x="10.0" y="563.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.05%)</title><rect x="10.0" y="547.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.05%)</title><rect x="10.0" y="531.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.05%)</title><rect x="10.0" y="515.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.05%)</title><rect x="10.0" y="499.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>java/lang/Thread.run (2,153 samples, 99.81%)</title><rect x="10.5" y="611.0" width="1177.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.5" y="622.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (2,153 samples, 99.81%)</title><rect x="10.5" y="595.0" width="1177.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.5" y="606.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (2,153 samples, 99.81%)</title><rect x="10.5" y="579.0" width="1177.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.5" y="590.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (2,153 samples, 99.81%)</title><rect x="10.5" y="563.0" width="1177.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.5" y="574.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>java/util/concurrent/Executors$RunnableAdapter.call (2,153 samples, 99.81%)</title><rect x="10.5" y="547.0" width="1177.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.5" y="558.0">java/util/concurrent/Executors$RunnableAdapter.call</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (2,153 samples, 99.81%)</title><rect x="10.5" y="531.0" width="1177.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.5" y="542.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call (2,153 samples, 99.81%)</title><rect x="10.5" y="515.0" width="1177.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.5" y="526.0">org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call</text>
</g>
<g>
<title>org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call (2,153 samples, 99.81%)</title><rect x="10.5" y="499.0" width="1177.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.5" y="510.0">org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call</text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (2,153 samples, 99.81%)</title><rect x="10.5" y="483.0" width="1177.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.5" y="494.0">java/lang/reflect/Method.invoke</text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (2,153 samples, 99.81%)</title><rect x="10.5" y="467.0" width="1177.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.5" y="478.0">jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke</text>
</g>
<g>
<title>jdk/internal/reflect/NativeMethodAccessorImpl.invoke (2,153 samples, 99.81%)</title><rect x="10.5" y="451.0" width="1177.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.5" y="462.0">jdk/internal/reflect/NativeMethodAccessorImpl.invoke</text>
</g>
<g>
<title>jdk/internal/reflect/NativeMethodAccessorImpl.invoke0 (2,153 samples, 99.81%)</title><rect x="10.5" y="435.0" width="1177.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="13.5" y="446.0">jdk/internal/reflect/NativeMethodAccessorImpl.invoke0</text>
</g>
<g>
<title>me/serce/jmh_generated/CopyFileBenchmark_copyFiles_jmhTest.copyFiles_AverageTime (2,153 samples, 99.81%)</title><rect x="10.5" y="419.0" width="1177.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.5" y="430.0">me/serce/jmh_generated/CopyFileBenchmark_copyFiles_jmhTest.copyFiles_AverageTime</text>
</g>
<g>
<title>me/serce/jmh_generated/CopyFileBenchmark_copyFiles_jmhTest.copyFiles_avgt_jmhStub (2,153 samples, 99.81%)</title><rect x="10.5" y="403.0" width="1177.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.5" y="414.0">me/serce/jmh_generated/CopyFileBenchmark_copyFiles_jmhTest.copyFiles_avgt_jmhStub</text>
</g>
<g>
<title>me/serce/CopyFileBenchmark.copyFiles (2,153 samples, 99.81%)</title><rect x="10.5" y="387.0" width="1177.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.5" y="398.0">me/serce/CopyFileBenchmark.copyFiles</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (1,076 samples, 49.88%)</title><rect x="10.5" y="371.0" width="588.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.5" y="382.0">sun/nio/ch/FileChannelImpl.read</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1,076 samples, 49.88%)</title><rect x="10.5" y="355.0" width="588.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="13.5" y="366.0">sun/nio/ch/IOUtil.read</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1,075 samples, 49.84%)</title><rect x="10.5" y="339.0" width="588.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.5" y="350.0">java/nio/HeapByteBuffer.put</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1,075 samples, 49.84%)</title><rect x="10.5" y="323.0" width="588.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.5" y="334.0">java/nio/DirectByteBuffer.get</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (1,075 samples, 49.84%)</title><rect x="10.5" y="307.0" width="588.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="13.5" y="318.0">jdk/internal/misc/Unsafe.copyMemory</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory0 (1,075 samples, 49.84%)</title><rect x="10.5" y="291.0" width="588.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.5" y="302.0">jdk/internal/misc/Unsafe.copyMemory0</text>
</g>
<g>
<title>acl_CopyRight (1,075 samples, 49.84%)</title><rect x="10.5" y="275.0" width="588.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="13.5" y="286.0">acl_CopyRight</text>
</g>
<g>
<title>apic_timer_interrupt (3 samples, 0.14%)</title><rect x="597.0" y="259.0" width="1.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="600.0" y="270.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (3 samples, 0.14%)</title><rect x="597.0" y="243.0" width="1.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="600.0" y="254.0"></text>
</g>
<g>
<title>irq_exit (3 samples, 0.14%)</title><rect x="597.0" y="227.0" width="1.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="600.0" y="238.0"></text>
</g>
<g>
<title>__softirqentry_text_start (3 samples, 0.14%)</title><rect x="597.0" y="211.0" width="1.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="600.0" y="222.0"></text>
</g>
<g>
<title>rcu_core_si (1 samples, 0.05%)</title><rect x="598.1" y="195.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="601.1" y="206.0"></text>
</g>
<g>
<title>note_gp_changes (1 samples, 0.05%)</title><rect x="598.1" y="179.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="601.1" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.05%)</title><rect x="598.6" y="339.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="601.6" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read (1 samples, 0.05%)</title><rect x="598.6" y="323.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="601.6" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (1 samples, 0.05%)</title><rect x="598.6" y="307.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="601.6" y="318.0"></text>
</g>
<g>
<title>__read (1 samples, 0.05%)</title><rect x="598.6" y="291.0" width="0.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="601.6" y="302.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.05%)</title><rect x="598.6" y="275.0" width="0.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="601.6" y="286.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.05%)</title><rect x="598.6" y="259.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="601.6" y="270.0"></text>
</g>
<g>
<title>__x64_sys_read (1 samples, 0.05%)</title><rect x="598.6" y="243.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="601.6" y="254.0"></text>
</g>
<g>
<title>ksys_read (1 samples, 0.05%)</title><rect x="598.6" y="227.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="601.6" y="238.0"></text>
</g>
<g>
<title>vfs_read (1 samples, 0.05%)</title><rect x="598.6" y="211.0" width="0.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="601.6" y="222.0"></text>
</g>
<g>
<title>__vfs_read (1 samples, 0.05%)</title><rect x="598.6" y="195.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="601.6" y="206.0"></text>
</g>
<g>
<title>new_sync_read (1 samples, 0.05%)</title><rect x="598.6" y="179.0" width="0.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="601.6" y="190.0"></text>
</g>
<g>
<title>ext4_file_read_iter (1 samples, 0.05%)</title><rect x="598.6" y="163.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="601.6" y="174.0"></text>
</g>
<g>
<title>generic_file_read_iter (1 samples, 0.05%)</title><rect x="598.6" y="147.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="601.6" y="158.0"></text>
</g>
<g>
<title>generic_file_buffered_read (1 samples, 0.05%)</title><rect x="598.6" y="131.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="601.6" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.write (1,077 samples, 49.93%)</title><rect x="599.2" y="371.0" width="589.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="602.2" y="382.0">sun/nio/ch/FileChannelImpl.write</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1,077 samples, 49.93%)</title><rect x="599.2" y="355.0" width="589.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="602.2" y="366.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (2 samples, 0.09%)</title><rect x="599.2" y="339.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="602.2" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (2 samples, 0.09%)</title><rect x="599.2" y="323.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="602.2" y="334.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (2 samples, 0.09%)</title><rect x="599.2" y="307.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="602.2" y="318.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory0 (2 samples, 0.09%)</title><rect x="599.2" y="291.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="602.2" y="302.0"></text>
</g>
<g>
<title>acl_CopyRight (2 samples, 0.09%)</title><rect x="599.2" y="275.0" width="1.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="602.2" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (1,075 samples, 49.84%)</title><rect x="600.3" y="339.0" width="588.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="603.3" y="350.0">sun/nio/ch/IOUtil.writeFromNativeBuffer</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (1,075 samples, 49.84%)</title><rect x="600.3" y="323.0" width="588.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="603.3" y="334.0">sun/nio/ch/FileDispatcherImpl.write</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (1,075 samples, 49.84%)</title><rect x="600.3" y="307.0" width="588.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="603.3" y="318.0">sun/nio/ch/FileDispatcherImpl.write0</text>
</g>
<g>
<title>__libc_write (1,075 samples, 49.84%)</title><rect x="600.3" y="291.0" width="588.1" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="603.3" y="302.0">__libc_write</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1,075 samples, 49.84%)</title><rect x="600.3" y="275.0" width="588.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="603.3" y="286.0">entry_SYSCALL_64_after_hwframe</text>
</g>
<g>
<title>do_syscall_64 (1,075 samples, 49.84%)</title><rect x="600.3" y="259.0" width="588.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="603.3" y="270.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_write (1,075 samples, 49.84%)</title><rect x="600.3" y="243.0" width="588.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="603.3" y="254.0">__x64_sys_write</text>
</g>
<g>
<title>ksys_write (1,075 samples, 49.84%)</title><rect x="600.3" y="227.0" width="588.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="603.3" y="238.0">ksys_write</text>
</g>
<g>
<title>vfs_write (1,075 samples, 49.84%)</title><rect x="600.3" y="211.0" width="588.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="603.3" y="222.0">vfs_write</text>
</g>
<g>
<title>__vfs_write (1,075 samples, 49.84%)</title><rect x="600.3" y="195.0" width="588.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="603.3" y="206.0">__vfs_write</text>
</g>
<g>
<title>new_sync_write (1,075 samples, 49.84%)</title><rect x="600.3" y="179.0" width="588.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="603.3" y="190.0">new_sync_write</text>
</g>
<g>
<title>ext4_file_write_iter (1,075 samples, 49.84%)</title><rect x="600.3" y="163.0" width="588.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="603.3" y="174.0">ext4_file_write_iter</text>
</g>
<g>
<title>__generic_file_write_iter (1,075 samples, 49.84%)</title><rect x="600.3" y="147.0" width="588.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="603.3" y="158.0">__generic_file_write_iter</text>
</g>
<g>
<title>_cond_resched (1 samples, 0.05%)</title><rect x="600.3" y="131.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="603.3" y="142.0"></text>
</g>
<g>
<title>ext4_da_write_begin (6 samples, 0.28%)</title><rect x="600.8" y="131.0" width="3.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="603.8" y="142.0"></text>
</g>
<g>
<title>ext4_da_write_end (7 samples, 0.32%)</title><rect x="604.1" y="131.0" width="3.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="607.1" y="142.0"></text>
</g>
<g>
<title>generic_perform_write (1,058 samples, 49.05%)</title><rect x="607.9" y="131.0" width="578.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="610.9" y="142.0">generic_perform_write</text>
</g>
<g>
<title>_cond_resched (3 samples, 0.14%)</title><rect x="616.1" y="115.0" width="1.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="619.1" y="126.0"></text>
</g>
<g>
<title>balance_dirty_pages_ratelimited (7 samples, 0.32%)</title><rect x="617.8" y="115.0" width="3.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="620.8" y="126.0"></text>
</g>
<g>
<title>ext4_da_write_begin (175 samples, 8.11%)</title><rect x="621.6" y="115.0" width="95.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="624.6" y="126.0">ext4_da_wri..</text>
</g>
<g>
<title>__ext4_journal_start_sb (69 samples, 3.20%)</title><rect x="629.8" y="99.0" width="37.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="632.8" y="110.0">__e..</text>
</g>
<g>
<title>ext4_journal_check_start (5 samples, 0.23%)</title><rect x="632.0" y="83.0" width="2.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="635.0" y="94.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.05%)</title><rect x="633.6" y="67.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="636.6" y="78.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.05%)</title><rect x="634.2" y="67.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="637.2" y="78.0"></text>
</g>
<g>
<title>jbd2__journal_start (59 samples, 2.74%)</title><rect x="634.7" y="83.0" width="32.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="637.7" y="94.0">jb..</text>
</g>
<g>
<title>_raw_read_lock (5 samples, 0.23%)</title><rect x="637.5" y="67.0" width="2.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="640.5" y="78.0"></text>
</g>
<g>
<title>kmem_cache_alloc (9 samples, 0.42%)</title><rect x="640.2" y="67.0" width="4.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="643.2" y="78.0"></text>
</g>
<g>
<title>memset_erms (9 samples, 0.42%)</title><rect x="645.1" y="67.0" width="5.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="648.1" y="78.0"></text>
</g>
<g>
<title>should_failslab (1 samples, 0.05%)</title><rect x="650.1" y="67.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="653.1" y="78.0"></text>
</g>
<g>
<title>start_this_handle (30 samples, 1.39%)</title><rect x="650.6" y="67.0" width="16.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="653.6" y="78.0"></text>
</g>
<g>
<title>add_transaction_credits (15 samples, 0.70%)</title><rect x="658.8" y="51.0" width="8.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="661.8" y="62.0"></text>
</g>
<g>
<title>kmem_cache_alloc (1 samples, 0.05%)</title><rect x="667.0" y="83.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="670.0" y="94.0"></text>
</g>
<g>
<title>ext4_block_write_begin (33 samples, 1.53%)</title><rect x="667.6" y="99.0" width="18.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="670.6" y="110.0"></text>
</g>
<g>
<title>ext4_journal_check_start (1 samples, 0.05%)</title><rect x="685.6" y="99.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="688.6" y="110.0"></text>
</g>
<g>
<title>ext4_nonda_switch (3 samples, 0.14%)</title><rect x="686.2" y="99.0" width="1.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="689.2" y="110.0"></text>
</g>
<g>
<title>grab_cache_page_write_begin (49 samples, 2.27%)</title><rect x="687.8" y="99.0" width="26.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="690.8" y="110.0">g..</text>
</g>
<g>
<title>pagecache_get_page (47 samples, 2.18%)</title><rect x="688.3" y="83.0" width="25.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="691.3" y="94.0">p..</text>
</g>
<g>
<title>PageHuge (2 samples, 0.09%)</title><rect x="690.5" y="67.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="693.5" y="78.0"></text>
</g>
<g>
<title>find_get_entry (38 samples, 1.76%)</title><rect x="691.6" y="67.0" width="20.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="694.6" y="78.0"></text>
</g>
<g>
<title>xas_load (18 samples, 0.83%)</title><rect x="702.0" y="51.0" width="9.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="705.0" y="62.0"></text>
</g>
<g>
<title>xas_start (1 samples, 0.05%)</title><rect x="711.9" y="51.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="714.9" y="62.0"></text>
</g>
<g>
<title>rcu_all_qs (3 samples, 0.14%)</title><rect x="712.4" y="67.0" width="1.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="715.4" y="78.0"></text>
</g>
<g>
<title>wait_for_stable_page (1 samples, 0.05%)</title><rect x="714.1" y="83.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="717.1" y="94.0"></text>
</g>
<g>
<title>jbd2__journal_start (1 samples, 0.05%)</title><rect x="714.6" y="99.0" width="0.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="717.6" y="110.0"></text>
</g>
<g>
<title>pagecache_get_page (2 samples, 0.09%)</title><rect x="715.2" y="99.0" width="1.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="718.2" y="110.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.05%)</title><rect x="716.2" y="99.0" width="0.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="719.2" y="110.0"></text>
</g>
<g>
<title>wait_for_stable_page (1 samples, 0.05%)</title><rect x="716.8" y="99.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="719.8" y="110.0"></text>
</g>
<g>
<title>ext4_da_write_end (216 samples, 10.01%)</title><rect x="717.3" y="115.0" width="118.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="720.3" y="126.0">ext4_da_write_..</text>
</g>
<g>
<title>__ext4_journal_stop (66 samples, 3.06%)</title><rect x="719.0" y="99.0" width="36.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="722.0" y="110.0">__e..</text>
</g>
<g>
<title>__wake_up (1 samples, 0.05%)</title><rect x="719.5" y="83.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="722.5" y="94.0"></text>
</g>
<g>
<title>jbd2_journal_stop (64 samples, 2.97%)</title><rect x="720.1" y="83.0" width="35.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="723.1" y="94.0">jbd..</text>
</g>
<g>
<title>__wake_up (30 samples, 1.39%)</title><rect x="729.4" y="67.0" width="16.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="732.4" y="78.0"></text>
</g>
<g>
<title>__lock_text_start (6 samples, 0.28%)</title><rect x="729.4" y="51.0" width="3.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="732.4" y="62.0"></text>
</g>
<g>
<title>__wake_up_common_lock (24 samples, 1.11%)</title><rect x="732.7" y="51.0" width="13.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="735.7" y="62.0"></text>
</g>
<g>
<title>__lock_text_start (20 samples, 0.93%)</title><rect x="734.8" y="35.0" width="11.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="737.8" y="46.0"></text>
</g>
<g>
<title>kmem_cache_free (17 samples, 0.79%)</title><rect x="745.8" y="67.0" width="9.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="748.8" y="78.0"></text>
</g>
<g>
<title>generic_write_end (141 samples, 6.54%)</title><rect x="755.1" y="99.0" width="77.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="758.1" y="110.0">generic_w..</text>
</g>
<g>
<title>block_write_end (136 samples, 6.31%)</title><rect x="757.8" y="83.0" width="74.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="760.8" y="94.0">block_wr..</text>
</g>
<g>
<title>__block_commit_write.isra.0 (135 samples, 6.26%)</title><rect x="758.4" y="67.0" width="73.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="761.4" y="78.0">__block_..</text>
</g>
<g>
<title>mark_buffer_dirty (106 samples, 4.91%)</title><rect x="774.2" y="51.0" width="58.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="777.2" y="62.0">mark_b..</text>
</g>
<g>
<title>unlock_page (6 samples, 0.28%)</title><rect x="832.2" y="99.0" width="3.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="835.2" y="110.0"></text>
</g>
<g>
<title>ext4_nonda_switch (1 samples, 0.05%)</title><rect x="835.5" y="115.0" width="0.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="838.5" y="126.0"></text>
</g>
<g>
<title>grab_cache_page_write_begin (2 samples, 0.09%)</title><rect x="836.1" y="115.0" width="1.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="839.1" y="126.0"></text>
</g>
<g>
<title>iov_iter_advance (4 samples, 0.19%)</title><rect x="837.1" y="115.0" width="2.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="840.1" y="126.0"></text>
</g>
<g>
<title>iov_iter_copy_from_user_atomic (531 samples, 24.62%)</title><rect x="839.3" y="115.0" width="290.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="842.3" y="126.0">iov_iter_copy_from_user_atomic</text>
</g>
<g>
<title>copy_user_enhanced_fast_string (524 samples, 24.29%)</title><rect x="842.6" y="99.0" width="286.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="845.6" y="110.0">copy_user_enhanced_fast_string</text>
</g>
<g>
<title>apic_timer_interrupt (3 samples, 0.14%)</title><rect x="1127.6" y="83.0" width="1.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1130.6" y="94.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (3 samples, 0.14%)</title><rect x="1127.6" y="67.0" width="1.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1130.6" y="78.0"></text>
</g>
<g>
<title>irq_exit (3 samples, 0.14%)</title><rect x="1127.6" y="51.0" width="1.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1130.6" y="62.0"></text>
</g>
<g>
<title>__softirqentry_text_start (3 samples, 0.14%)</title><rect x="1127.6" y="35.0" width="1.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1130.6" y="46.0"></text>
</g>
<g>
<title>copyin (1 samples, 0.05%)</title><rect x="1129.3" y="99.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1132.3" y="110.0"></text>
</g>
<g>
<title>iov_iter_fault_in_readable (96 samples, 4.45%)</title><rect x="1129.8" y="115.0" width="52.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1132.8" y="126.0">iov_i..</text>
</g>
<g>
<title>unlock_page (8 samples, 0.37%)</title><rect x="1182.3" y="115.0" width="4.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1185.3" y="126.0"></text>
</g>
<g>
<title>iov_iter_advance (2 samples, 0.09%)</title><rect x="1186.7" y="131.0" width="1.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1189.7" y="142.0"></text>
</g>
<g>
<title>iov_iter_fault_in_readable (1 samples, 0.05%)</title><rect x="1187.8" y="131.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1190.8" y="142.0"></text>
</g>
<g>
<title>start_thread (3 samples, 0.14%)</title><rect x="1188.4" y="611.0" width="1.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1191.4" y="622.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (3 samples, 0.14%)</title><rect x="1188.4" y="595.0" width="1.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1191.4" y="606.0"></text>
</g>
<g>
<title>Thread::call_run() (3 samples, 0.14%)</title><rect x="1188.4" y="579.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.4" y="590.0"></text>
</g>
<g>
<title>JavaThread::run() (3 samples, 0.14%)</title><rect x="1188.4" y="563.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.4" y="574.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (3 samples, 0.14%)</title><rect x="1188.4" y="547.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.4" y="558.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (3 samples, 0.14%)</title><rect x="1188.4" y="531.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.4" y="542.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (3 samples, 0.14%)</title><rect x="1188.4" y="515.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.4" y="526.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (3 samples, 0.14%)</title><rect x="1188.4" y="499.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.4" y="510.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (2 samples, 0.09%)</title><rect x="1188.4" y="483.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.4" y="494.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.05%)</title><rect x="1188.4" y="467.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.4" y="478.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.05%)</title><rect x="1188.4" y="451.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.4" y="462.0"></text>
</g>
<g>
<title>Arena::set_size_in_bytes(unsigned long) (1 samples, 0.05%)</title><rect x="1188.4" y="435.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.4" y="446.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (1 samples, 0.05%)</title><rect x="1188.9" y="467.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.9" y="478.0"></text>
</g>
<g>
<title>MachNode::two_adr() const (1 samples, 0.05%)</title><rect x="1188.9" y="451.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.9" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1189.5" y="483.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1192.5" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1189.5" y="467.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1189.5" y="451.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1192.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1189.5" y="435.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.05%)</title><rect x="1189.5" y="419.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1192.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.05%)</title><rect x="1189.5" y="403.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1192.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.05%)</title><rect x="1189.5" y="387.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1192.5" y="398.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.05%)</title><rect x="1189.5" y="371.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1192.5" y="382.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseGVN*) (1 samples, 0.05%)</title><rect x="1189.5" y="355.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1192.5" y="366.0"></text>
</g>
<g>
<title>TypeLong::make(long, long, int) (1 samples, 0.05%)</title><rect x="1189.5" y="339.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1192.5" y="350.0"></text>
</g>
</g>
</svg>
