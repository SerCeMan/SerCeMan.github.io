<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="533"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="533"> </text>
<g id="frames">
<g>
<title>all (3,009 samples, 100.00%)</title><rect x="10.0" y="499.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="510.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.03%)</title><rect x="10.0" y="483.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (1 samples, 0.03%)</title><rect x="10.0" y="467.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.10%)</title><rect x="10.4" y="483.0" width="1.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.4" y="494.0"></text>
</g>
<g>
<title>do_futex_wait.constprop.0 (2 samples, 0.07%)</title><rect x="10.4" y="467.0" width="0.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="13.4" y="478.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.07%)</title><rect x="10.4" y="451.0" width="0.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="13.4" y="462.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.07%)</title><rect x="10.4" y="435.0" width="0.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="13.4" y="446.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.03%)</title><rect x="10.8" y="419.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="13.8" y="430.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="10.8" y="403.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="13.8" y="414.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.03%)</title><rect x="10.8" y="387.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="13.8" y="398.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.03%)</title><rect x="10.8" y="371.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="13.8" y="382.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="10.8" y="355.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="13.8" y="366.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="10.8" y="339.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="13.8" y="350.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="10.8" y="323.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="13.8" y="334.0"></text>
</g>
<g>
<title>pthread_cond_timedwait@@GLIBC_2.3.2 (1 samples, 0.03%)</title><rect x="11.2" y="467.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="14.2" y="478.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="11.2" y="451.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="14.2" y="462.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="11.2" y="435.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="14.2" y="446.0"></text>
</g>
<g>
<title>get_timespec64 (1 samples, 0.03%)</title><rect x="11.2" y="419.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="14.2" y="430.0"></text>
</g>
<g>
<title>__pthread_cond_broadcast (1 samples, 0.03%)</title><rect x="11.6" y="483.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="14.6" y="494.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.03%)</title><rect x="12.0" y="483.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="15.0" y="494.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.03%)</title><rect x="12.0" y="467.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="15.0" y="478.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.03%)</title><rect x="12.0" y="451.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="15.0" y="462.0"></text>
</g>
<g>
<title>java/lang/Thread.run (2,950 samples, 98.04%)</title><rect x="12.4" y="483.0" width="1156.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.4" y="494.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (2,950 samples, 98.04%)</title><rect x="12.4" y="467.0" width="1156.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="15.4" y="478.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (2,950 samples, 98.04%)</title><rect x="12.4" y="451.0" width="1156.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.4" y="462.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (2,950 samples, 98.04%)</title><rect x="12.4" y="435.0" width="1156.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="15.4" y="446.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>java/util/concurrent/Executors$RunnableAdapter.call (2,950 samples, 98.04%)</title><rect x="12.4" y="419.0" width="1156.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="15.4" y="430.0">java/util/concurrent/Executors$RunnableAdapter.call</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (2,950 samples, 98.04%)</title><rect x="12.4" y="403.0" width="1156.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="15.4" y="414.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call (2,950 samples, 98.04%)</title><rect x="12.4" y="387.0" width="1156.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="15.4" y="398.0">org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call</text>
</g>
<g>
<title>org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call (2,950 samples, 98.04%)</title><rect x="12.4" y="371.0" width="1156.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="15.4" y="382.0">org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call</text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (2,950 samples, 98.04%)</title><rect x="12.4" y="355.0" width="1156.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.4" y="366.0">java/lang/reflect/Method.invoke</text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (2,950 samples, 98.04%)</title><rect x="12.4" y="339.0" width="1156.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="15.4" y="350.0">jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke</text>
</g>
<g>
<title>jdk/internal/reflect/NativeMethodAccessorImpl.invoke (2,950 samples, 98.04%)</title><rect x="12.4" y="323.0" width="1156.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.4" y="334.0">jdk/internal/reflect/NativeMethodAccessorImpl.invoke</text>
</g>
<g>
<title>jdk/internal/reflect/NativeMethodAccessorImpl.invoke0 (2,950 samples, 98.04%)</title><rect x="12.4" y="307.0" width="1156.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.4" y="318.0">jdk/internal/reflect/NativeMethodAccessorImpl.invoke0</text>
</g>
<g>
<title>me/serce/jmh_generated/AllocateBuffer1_heap_jmhTest.heap_AverageTime (2,950 samples, 98.04%)</title><rect x="12.4" y="291.0" width="1156.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="15.4" y="302.0">me/serce/jmh_generated/AllocateBuffer1_heap_jmhTest.heap_AverageTime</text>
</g>
<g>
<title>me/serce/jmh_generated/AllocateBuffer1_heap_jmhTest.heap_avgt_jmhStub (2,950 samples, 98.04%)</title><rect x="12.4" y="275.0" width="1156.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.4" y="286.0">me/serce/jmh_generated/AllocateBuffer1_heap_jmhTest.heap_avgt_jmhStub</text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="184.5" y="259.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="187.5" y="270.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="184.5" y="243.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="187.5" y="254.0"></text>
</g>
<g id="myid">
<title>me/serce/AllocateBuffer1.heap (2,245 samples, 74.61%)</title><rect x="184.9" y="259.0" width="880.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="187.9" y="270.0">me/serce/AllocateBuffer1.heap</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (2,245 samples, 74.61%)</title><rect x="184.9" y="243.0" width="880.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="187.9" y="254.0">java/nio/ByteBuffer.allocate</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.10%)</title><rect x="1045.3" y="227.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1048.3" y="238.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.07%)</title><rect x="1045.7" y="211.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1048.7" y="222.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.07%)</title><rect x="1045.7" y="195.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1048.7" y="206.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (1 samples, 0.03%)</title><rect x="1045.7" y="179.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1048.7" y="190.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWordImpl**) const (1 samples, 0.03%)</title><rect x="1046.1" y="179.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1049.1" y="190.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="1046.5" y="227.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1049.5" y="238.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="1046.5" y="211.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1049.5" y="222.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="1046.5" y="195.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1049.5" y="206.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.03%)</title><rect x="1046.5" y="179.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1049.5" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (47 samples, 1.56%)</title><rect x="1046.9" y="227.0" width="18.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1049.9" y="238.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (42 samples, 1.40%)</title><rect x="1046.9" y="211.0" width="16.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1049.9" y="222.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (38 samples, 1.26%)</title><rect x="1048.4" y="195.0" width="14.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1051.4" y="206.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (35 samples, 1.16%)</title><rect x="1049.6" y="179.0" width="13.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1052.6" y="190.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (3 samples, 0.10%)</title><rect x="1050.0" y="163.0" width="1.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1053.0" y="174.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWordImpl**, unsigned long, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="1051.2" y="163.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1054.2" y="174.0"></text>
</g>
<g>
<title>JfrAllocationTracer::JfrAllocationTracer(HeapWordImpl**, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="1051.2" y="147.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1054.2" y="158.0"></text>
</g>
<g>
<title>JfrAllocationTracer::JfrAllocationTracer(HeapWordImpl**, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="1051.6" y="163.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1054.6" y="174.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (22 samples, 0.73%)</title><rect x="1052.0" y="163.0" width="8.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1055.0" y="174.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.03%)</title><rect x="1052.4" y="147.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1055.4" y="158.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (18 samples, 0.60%)</title><rect x="1052.7" y="147.0" width="7.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1055.7" y="158.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (15 samples, 0.50%)</title><rect x="1053.5" y="131.0" width="5.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1056.5" y="142.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (8 samples, 0.27%)</title><rect x="1053.9" y="115.0" width="3.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1056.9" y="126.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (8 samples, 0.27%)</title><rect x="1053.9" y="99.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1056.9" y="110.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, HeapRegionType, bool) (4 samples, 0.13%)</title><rect x="1053.9" y="83.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1056.9" y="94.0"></text>
</g>
<g>
<title>MasterFreeRegionListChecker::check_mt_safety() (1 samples, 0.03%)</title><rect x="1055.1" y="67.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1058.1" y="78.0"></text>
</g>
<g>
<title>Monitor::owned_by_self() const (1 samples, 0.03%)</title><rect x="1055.1" y="51.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1058.1" y="62.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.03%)</title><rect x="1055.1" y="35.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1058.1" y="46.0"></text>
</g>
<g>
<title>G1RemSetTrackingPolicy::update_at_allocate(HeapRegion*) (1 samples, 0.03%)</title><rect x="1055.5" y="83.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1058.5" y="94.0"></text>
</g>
<g>
<title>G1FromCardCache::clear(unsigned int) (1 samples, 0.03%)</title><rect x="1055.5" y="67.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1058.5" y="78.0"></text>
</g>
<g>
<title>HeapRegion::set_eden() (2 samples, 0.07%)</title><rect x="1055.9" y="83.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1058.9" y="94.0"></text>
</g>
<g>
<title>HeapRegion::report_region_type_change(G1HeapRegionTraceType::Type) (2 samples, 0.07%)</title><rect x="1055.9" y="67.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1058.9" y="78.0"></text>
</g>
<g>
<title>HeapRegionRemSet::clear_fcc() (1 samples, 0.03%)</title><rect x="1056.7" y="83.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1059.7" y="94.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (6 samples, 0.20%)</title><rect x="1057.1" y="115.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1060.1" y="126.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (5 samples, 0.17%)</title><rect x="1057.1" y="99.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1060.1" y="110.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (4 samples, 0.13%)</title><rect x="1057.1" y="83.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1060.1" y="94.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (1 samples, 0.03%)</title><rect x="1057.5" y="67.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1060.5" y="78.0"></text>
</g>
<g>
<title>AbsSeq::davg() const (1 samples, 0.03%)</title><rect x="1057.5" y="51.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1060.5" y="62.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.07%)</title><rect x="1057.8" y="67.0" width="0.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1060.8" y="78.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="1058.6" y="83.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1061.6" y="94.0"></text>
</g>
<g>
<title>G1MonitoringSupport::update_eden_size() (1 samples, 0.03%)</title><rect x="1059.0" y="99.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1062.0" y="110.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="1059.0" y="83.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1062.0" y="94.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="1059.4" y="131.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1062.4" y="142.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::end_reserve() (2 samples, 0.07%)</title><rect x="1059.8" y="147.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1062.8" y="158.0"></text>
</g>
<g>
<title>CollectedHeap::tlab_alloc_reserve() const (2 samples, 0.07%)</title><rect x="1059.8" y="131.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1062.8" y="142.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWordImpl**) const (7 samples, 0.23%)</title><rect x="1060.6" y="163.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1063.6" y="174.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.10%)</title><rect x="1063.3" y="211.0" width="1.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1066.3" y="222.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (3 samples, 0.10%)</title><rect x="1063.3" y="195.0" width="1.2" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1066.3" y="206.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.03%)</title><rect x="1064.5" y="211.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1067.5" y="222.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray(BasicType, int, Thread*) (1 samples, 0.03%)</title><rect x="1064.9" y="211.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1067.9" y="222.0"></text>
</g>
<g>
<title>org/openjdk/jmh/infra/Blackhole.consume (265 samples, 8.81%)</title><rect x="1065.3" y="259.0" width="103.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1068.3" y="270.0">org/openjdk/..</text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="1168.8" y="243.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1171.8" y="254.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="1168.8" y="227.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1171.8" y="238.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="1168.8" y="211.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1171.8" y="222.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.03%)</title><rect x="1168.8" y="195.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1171.8" y="206.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.03%)</title><rect x="1168.8" y="179.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1171.8" y="190.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.03%)</title><rect x="1168.8" y="163.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1171.8" y="174.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="1168.8" y="147.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1171.8" y="158.0"></text>
</g>
<g>
<title>start_thread (53 samples, 1.76%)</title><rect x="1169.2" y="483.0" width="20.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1172.2" y="494.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (53 samples, 1.76%)</title><rect x="1169.2" y="467.0" width="20.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1172.2" y="478.0"></text>
</g>
<g>
<title>Thread::call_run() (53 samples, 1.76%)</title><rect x="1169.2" y="451.0" width="20.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.2" y="462.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (1 samples, 0.03%)</title><rect x="1169.2" y="435.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.2" y="446.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (1 samples, 0.03%)</title><rect x="1169.2" y="419.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.2" y="430.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate(HeapRegionClosure*) const (1 samples, 0.03%)</title><rect x="1169.2" y="403.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.2" y="414.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (1 samples, 0.03%)</title><rect x="1169.2" y="387.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.2" y="398.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.03%)</title><rect x="1169.2" y="371.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.2" y="382.0"></text>
</g>
<g>
<title>GangWorker::loop() (38 samples, 1.26%)</title><rect x="1169.6" y="435.0" width="14.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.6" y="446.0"></text>
</g>
<g>
<title>G1EvacuateRegionsBaseTask::work(unsigned int) (12 samples, 0.40%)</title><rect x="1169.6" y="419.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.6" y="430.0"></text>
</g>
<g>
<title>G1EvacuateRegionsTask::evacuate_live_objects(G1ParScanThreadState*, unsigned int) (2 samples, 0.07%)</title><rect x="1169.6" y="403.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1172.6" y="414.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.07%)</title><rect x="1169.6" y="387.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.6" y="398.0"></text>
</g>
<g>
<title>OWSTTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.07%)</title><rect x="1169.6" y="371.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.6" y="382.0"></text>
</g>
<g>
<title>OWSTTaskTerminator::do_spin_master_work(TerminatorTerminator*) (1 samples, 0.03%)</title><rect x="1169.6" y="355.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.6" y="366.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.03%)</title><rect x="1170.0" y="355.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1173.0" y="366.0"></text>
</g>
<g>
<title>G1EvacuateRegionsTask::scan_roots(G1ParScanThreadState*, unsigned int) (5 samples, 0.17%)</title><rect x="1170.4" y="403.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.4" y="414.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (5 samples, 0.17%)</title><rect x="1170.4" y="387.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.4" y="398.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (5 samples, 0.17%)</title><rect x="1170.4" y="371.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.4" y="382.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (5 samples, 0.17%)</title><rect x="1170.4" y="355.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.4" y="366.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (5 samples, 0.17%)</title><rect x="1170.4" y="339.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.4" y="350.0"></text>
</g>
<g>
<title>ConstantPool::impl_signature_ref_at(int, bool) (1 samples, 0.03%)</title><rect x="1170.4" y="323.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1173.4" y="334.0"></text>
</g>
<g>
<title>RuntimeStub::preserve_callee_argument_oops(frame, RegisterMap const*, OopClosure*) (1 samples, 0.03%)</title><rect x="1170.8" y="323.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.8" y="334.0"></text>
</g>
<g>
<title>StackFrameStream::StackFrameStream(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="1171.2" y="323.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.2" y="334.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.03%)</title><rect x="1171.2" y="307.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.2" y="318.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.03%)</title><rect x="1171.2" y="291.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.2" y="302.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, RegisterMap const*, bool) (2 samples, 0.07%)</title><rect x="1171.6" y="323.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.6" y="334.0"></text>
</g>
<g>
<title>ConstantPool::impl_signature_ref_at(int, bool) (2 samples, 0.07%)</title><rect x="1171.6" y="307.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.6" y="318.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int, G1GCPhaseTimes::GCParPhases, G1GCPhaseTimes::GCParPhases, G1GCPhaseTimes::GCParPhases) (5 samples, 0.17%)</title><rect x="1172.4" y="403.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.4" y="414.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_incremental_part_from(HeapRegionClosure*, unsigned int, unsigned int) const (4 samples, 0.13%)</title><rect x="1172.4" y="387.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.4" y="398.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (4 samples, 0.13%)</title><rect x="1172.4" y="371.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.4" y="382.0"></text>
</g>
<g>
<title>G1EvacPhaseWithTrimTimeTracker::G1EvacPhaseWithTrimTimeTracker(G1ParScanThreadState*, TimeInterval&lt;CompositeCounterRepresentation, CompositeElapsedCounterSource&gt;&amp;, TimeInterval&lt;CompositeCounterRepresentation, CompositeElapsedCounterSource&gt;&amp;) (1 samples, 0.03%)</title><rect x="1172.4" y="355.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.4" y="366.0"></text>
</g>
<g>
<title>os::elapsed_counter() (1 samples, 0.03%)</title><rect x="1172.4" y="339.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.4" y="350.0"></text>
</g>
<g>
<title>G1EvacPhaseWithTrimTimeTracker::~G1EvacPhaseWithTrimTimeTracker() (1 samples, 0.03%)</title><rect x="1172.7" y="355.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.7" y="366.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (2 samples, 0.07%)</title><rect x="1173.1" y="355.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.1" y="366.0"></text>
</g>
<g>
<title>OtherRegionsTable::is_empty() const (1 samples, 0.03%)</title><rect x="1173.5" y="339.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.5" y="350.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (1 samples, 0.03%)</title><rect x="1173.9" y="387.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.9" y="398.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::work(unsigned int) (18 samples, 0.60%)</title><rect x="1174.3" y="419.0" width="7.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.3" y="430.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate(HeapRegionClosure*) const (12 samples, 0.40%)</title><rect x="1174.3" y="403.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.3" y="414.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::G1SerialFreeCollectionSetClosure::do_heap_region(HeapRegion*) (8 samples, 0.27%)</title><rect x="1174.3" y="387.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.3" y="398.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_region(HeapRegion*, FreeRegionList*, bool, bool, bool) (1 samples, 0.03%)</title><rect x="1176.3" y="371.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.3" y="382.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::zero_bottom_entry_raw() (1 samples, 0.03%)</title><rect x="1176.3" y="355.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.3" y="366.0"></text>
</g>
<g>
<title>SurvRateGroup::record_surviving_words(int, unsigned long) (2 samples, 0.07%)</title><rect x="1176.7" y="371.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.7" y="382.0"></text>
</g>
<g>
<title>TruncatedSeq::add(double) (4 samples, 0.13%)</title><rect x="1177.5" y="387.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.5" y="398.0"></text>
</g>
<g>
<title>G1FromCardCache::clear(unsigned int) (1 samples, 0.03%)</title><rect x="1179.0" y="403.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.0" y="414.0"></text>
</g>
<g>
<title>HeapRegionRemSet::clear_locked(bool) (2 samples, 0.07%)</title><rect x="1179.4" y="403.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.4" y="414.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.03%)</title><rect x="1179.8" y="387.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1182.8" y="398.0"></text>
</g>
<g>
<title>OtherRegionsTable::occupied() const (2 samples, 0.07%)</title><rect x="1180.2" y="403.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.2" y="414.0"></text>
</g>
<g>
<title>os::elapsedTime() (1 samples, 0.03%)</title><rect x="1181.0" y="403.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.0" y="414.0"></text>
</g>
<g>
<title>G1GCPhaseTimes::record_thread_work_item(G1GCPhaseTimes::GCParPhases, unsigned int, unsigned long, unsigned int) (1 samples, 0.03%)</title><rect x="1181.4" y="419.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.4" y="430.0"></text>
</g>
<g>
<title>G1RemSetScanState::G1ClearCardTableTask::work(unsigned int) (2 samples, 0.07%)</title><rect x="1181.8" y="419.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.8" y="430.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (2 samples, 0.07%)</title><rect x="1182.5" y="419.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.5" y="430.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (2 samples, 0.07%)</title><rect x="1182.5" y="403.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.5" y="414.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) [clone .part.64] (1 samples, 0.03%)</title><rect x="1182.5" y="387.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.5" y="398.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.03%)</title><rect x="1182.5" y="371.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.5" y="382.0"></text>
</g>
<g>
<title>ParallelSPCleanupThreadClosure::do_thread(Thread*) (1 samples, 0.03%)</title><rect x="1182.9" y="387.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.9" y="398.0"></text>
</g>
<g>
<title>ObjectSynchronizer::deflate_thread_local_monitors(Thread*, DeflateMonitorCounters*) (1 samples, 0.03%)</title><rect x="1182.9" y="371.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.9" y="382.0"></text>
</g>
<g>
<title>os::elapsed_frequency() (1 samples, 0.03%)</title><rect x="1182.9" y="355.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.9" y="366.0"></text>
</g>
<g>
<title>sem_post@@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="1183.3" y="419.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1186.3" y="430.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="1183.3" y="403.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1186.3" y="414.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="1183.3" y="387.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1186.3" y="398.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.03%)</title><rect x="1183.3" y="371.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1186.3" y="382.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="1183.3" y="355.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1186.3" y="366.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.03%)</title><rect x="1183.3" y="339.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1186.3" y="350.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.03%)</title><rect x="1183.3" y="323.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1186.3" y="334.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.03%)</title><rect x="1183.3" y="307.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1186.3" y="318.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="1183.3" y="291.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1186.3" y="302.0"></text>
</g>
<g>
<title>void WeakProcessor::Task::work&lt;G1STWIsAliveClosure, G1KeepAliveClosure&gt;(unsigned int, G1STWIsAliveClosure*, G1KeepAliveClosure*) (2 samples, 0.07%)</title><rect x="1183.7" y="419.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.7" y="430.0"></text>
</g>
<g>
<title>VMThread::run() (14 samples, 0.47%)</title><rect x="1184.5" y="435.0" width="5.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.5" y="446.0"></text>
</g>
<g>
<title>VMThread::loop() (14 samples, 0.47%)</title><rect x="1184.5" y="419.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.5" y="430.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.63] (14 samples, 0.47%)</title><rect x="1184.5" y="403.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.5" y="414.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (14 samples, 0.47%)</title><rect x="1184.5" y="387.0" width="5.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.5" y="398.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (14 samples, 0.47%)</title><rect x="1184.5" y="371.0" width="5.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.5" y="382.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (13 samples, 0.43%)</title><rect x="1184.5" y="355.0" width="5.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.5" y="366.0"></text>
</g>
<g>
<title>G1CollectedHeap::calculate_collection_set(G1EvacuationInfo&amp;, double) (3 samples, 0.10%)</title><rect x="1184.5" y="339.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.5" y="350.0"></text>
</g>
<g>
<title>G1CollectionSet::finalize_old_part(double) (3 samples, 0.10%)</title><rect x="1184.5" y="323.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.5" y="334.0"></text>
</g>
<g>
<title>void QuickSort::inner_sort&lt;true, unsigned int, int (*)(unsigned int, unsigned int)&gt;(unsigned int*, unsigned long, int (*)(unsigned int, unsigned int)) (2 samples, 0.07%)</title><rect x="1184.9" y="307.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.9" y="318.0"></text>
</g>
<g>
<title>compare_region_idx(unsigned int, unsigned int) (2 samples, 0.07%)</title><rect x="1184.9" y="291.0" width="0.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1187.9" y="302.0"></text>
</g>
<g>
<title>G1CollectedHeap::post_evacuate_collection_set(G1EvacuationInfo&amp;, G1ParScanThreadStateSet*) (4 samples, 0.13%)</title><rect x="1185.7" y="339.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.7" y="350.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(G1CollectionSet*, G1EvacuationInfo&amp;, unsigned long const*) (3 samples, 0.10%)</title><rect x="1185.7" y="323.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.7" y="334.0"></text>
</g>
<g>
<title>FreeRegionList::add_ordered(FreeRegionList*) (2 samples, 0.07%)</title><rect x="1185.7" y="307.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.7" y="318.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::G1PrepareFreeCollectionSetClosure::do_heap_region(HeapRegion*) (1 samples, 0.03%)</title><rect x="1186.5" y="307.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.5" y="318.0"></text>
</g>
<g>
<title>G1RemSet::cleanup_after_scan_rem_set() (1 samples, 0.03%)</title><rect x="1186.9" y="323.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.9" y="334.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*, unsigned int) (1 samples, 0.03%)</title><rect x="1186.9" y="307.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.9" y="318.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int) (1 samples, 0.03%)</title><rect x="1186.9" y="291.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.9" y="302.0"></text>
</g>
<g>
<title>sem_post@@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="1186.9" y="275.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1189.9" y="286.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="1186.9" y="259.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1189.9" y="270.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="1186.9" y="243.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1189.9" y="254.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.03%)</title><rect x="1186.9" y="227.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1189.9" y="238.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="1186.9" y="211.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1189.9" y="222.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.03%)</title><rect x="1186.9" y="195.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1189.9" y="206.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.03%)</title><rect x="1186.9" y="179.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1189.9" y="190.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.03%)</title><rect x="1186.9" y="163.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1189.9" y="174.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="1186.9" y="147.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1189.9" y="158.0"></text>
</g>
<g>
<title>G1GCPhaseTimes::print() (1 samples, 0.03%)</title><rect x="1187.3" y="339.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.3" y="350.0"></text>
</g>
<g>
<title>G1GCPhaseTimes::print_post_evacuate_collection_set() const (1 samples, 0.03%)</title><rect x="1187.3" y="323.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.3" y="334.0"></text>
</g>
<g>
<title>ReferenceProcessorPhaseTimes::print_all_references(unsigned int, bool) const (1 samples, 0.03%)</title><rect x="1187.3" y="307.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.3" y="318.0"></text>
</g>
<g>
<title>outputStream::print_cr(char const*, ...) (1 samples, 0.03%)</title><rect x="1187.3" y="291.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.3" y="302.0"></text>
</g>
<g>
<title>outputStream::do_vsnprintf_and_write_with_automatic_buffer(char const*, __va_list_tag*, bool) (1 samples, 0.03%)</title><rect x="1187.3" y="275.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.3" y="286.0"></text>
</g>
<g>
<title>LogStream::write(char const*, unsigned long) (1 samples, 0.03%)</title><rect x="1187.3" y="259.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.3" y="270.0"></text>
</g>
<g>
<title>LogTargetHandle::print(char const*, ...) (1 samples, 0.03%)</title><rect x="1187.3" y="243.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.3" y="254.0"></text>
</g>
<g>
<title>LogPrefix&lt;(LogTag::type)43, (LogTag::type)91, (LogTag::type)97, (LogTag::type)0, (LogTag::type)0, (LogTag::type)0&gt;::prefix(char*, unsigned long) (1 samples, 0.03%)</title><rect x="1187.3" y="227.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.3" y="238.0"></text>
</g>
<g>
<title>G1Policy::record_collection_pause_end(double, unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="1187.6" y="339.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.6" y="350.0"></text>
</g>
<g>
<title>G1CollectedHeap::recalculate_used() const (1 samples, 0.03%)</title><rect x="1187.6" y="323.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.6" y="334.0"></text>
</g>
<g>
<title>HeapRegionManager::iterate(HeapRegionClosure*) const (1 samples, 0.03%)</title><rect x="1187.6" y="307.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.6" y="318.0"></text>
</g>
<g>
<title>SumUsedClosure::do_heap_region(HeapRegion*) (1 samples, 0.03%)</title><rect x="1187.6" y="291.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.6" y="302.0"></text>
</g>
<g>
<title>G1Policy::record_collection_pause_start(double) (2 samples, 0.07%)</title><rect x="1188.0" y="339.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.0" y="350.0"></text>
</g>
<g>
<title>G1CollectedHeap::recalculate_used() const (2 samples, 0.07%)</title><rect x="1188.0" y="323.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.0" y="334.0"></text>
</g>
<g>
<title>HeapRegionManager::iterate(HeapRegionClosure*) const (2 samples, 0.07%)</title><rect x="1188.0" y="307.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.0" y="318.0"></text>
</g>
<g>
<title>SumUsedClosure::do_heap_region(HeapRegion*) (2 samples, 0.07%)</title><rect x="1188.0" y="291.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.0" y="302.0"></text>
</g>
<g>
<title>G1RemSet::prepare_for_scan_rem_set() (1 samples, 0.03%)</title><rect x="1188.8" y="339.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.8" y="350.0"></text>
</g>
<g>
<title>PLABStats::adjust_desired_plab_sz() (1 samples, 0.03%)</title><rect x="1189.2" y="339.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1192.2" y="350.0"></text>
</g>
<g>
<title>G1EvacStats::compute_desired_plab_sz() (1 samples, 0.03%)</title><rect x="1189.2" y="323.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1192.2" y="334.0"></text>
</g>
<g>
<title>G1GCPhaseTimes::note_gc_start() (1 samples, 0.03%)</title><rect x="1189.6" y="355.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1192.6" y="366.0"></text>
</g>
</g>
<script>
	window.addEventListener('load', function(){ zoom(document.getElementById('myid')) })
</script>
</svg>
