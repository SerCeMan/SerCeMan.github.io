<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="581"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="581"> </text>
<g id="frames">
<g>
<title>all (5,989 samples, 100.00%)</title><rect x="10.0" y="547.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="558.0">all</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (10 samples, 0.17%)</title><rect x="10.0" y="531.0" width="2.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (5 samples, 0.08%)</title><rect x="12.0" y="531.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="15.0" y="542.0"></text>
</g>
<g>
<title>async_page_fault (5 samples, 0.08%)</title><rect x="12.0" y="515.0" width="1.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="15.0" y="526.0"></text>
</g>
<g>
<title>do_async_page_fault (5 samples, 0.08%)</title><rect x="12.0" y="499.0" width="1.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="15.0" y="510.0"></text>
</g>
<g>
<title>do_page_fault (5 samples, 0.08%)</title><rect x="12.0" y="483.0" width="1.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="15.0" y="494.0"></text>
</g>
<g>
<title>__do_page_fault (5 samples, 0.08%)</title><rect x="12.0" y="467.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="15.0" y="478.0"></text>
</g>
<g>
<title>do_user_addr_fault (5 samples, 0.08%)</title><rect x="12.0" y="451.0" width="1.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="15.0" y="462.0"></text>
</g>
<g>
<title>handle_mm_fault (5 samples, 0.08%)</title><rect x="12.0" y="435.0" width="1.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="15.0" y="446.0"></text>
</g>
<g>
<title>__handle_mm_fault (4 samples, 0.07%)</title><rect x="12.2" y="419.0" width="0.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="15.2" y="430.0"></text>
</g>
<g>
<title>do_anonymous_page (4 samples, 0.07%)</title><rect x="12.2" y="403.0" width="0.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="15.2" y="414.0"></text>
</g>
<g>
<title>alloc_pages_vma (3 samples, 0.05%)</title><rect x="12.2" y="387.0" width="0.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="15.2" y="398.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (3 samples, 0.05%)</title><rect x="12.2" y="371.0" width="0.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="15.2" y="382.0"></text>
</g>
<g>
<title>get_page_from_freelist (2 samples, 0.03%)</title><rect x="12.4" y="355.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="15.4" y="366.0"></text>
</g>
<g>
<title>clear_page_erms (2 samples, 0.03%)</title><rect x="12.4" y="339.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="15.4" y="350.0"></text>
</g>
<g>
<title>[unknown] (41 samples, 0.68%)</title><rect x="13.3" y="531.0" width="8.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="16.3" y="542.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (41 samples, 0.68%)</title><rect x="13.3" y="515.0" width="8.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="16.3" y="526.0"></text>
</g>
<g>
<title>[unknown_Java] (2 samples, 0.03%)</title><rect x="21.4" y="531.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="24.4" y="542.0"></text>
</g>
<g>
<title>__libc_malloc (2 samples, 0.03%)</title><rect x="21.8" y="531.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="24.8" y="542.0"></text>
</g>
<g>
<title>java/lang/Thread.run (902 samples, 15.06%)</title><rect x="22.4" y="531.0" width="177.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.4" y="542.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (902 samples, 15.06%)</title><rect x="22.4" y="515.0" width="177.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="25.4" y="526.0">java/util/concurrent/Th..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (902 samples, 15.06%)</title><rect x="22.4" y="499.0" width="177.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="25.4" y="510.0">java/util/concurrent/Th..</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (902 samples, 15.06%)</title><rect x="22.4" y="483.0" width="177.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.4" y="494.0">java/util/concurrent/Fu..</text>
</g>
<g>
<title>java/util/concurrent/Executors$RunnableAdapter.call (902 samples, 15.06%)</title><rect x="22.4" y="467.0" width="177.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="25.4" y="478.0">java/util/concurrent/Ex..</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (902 samples, 15.06%)</title><rect x="22.4" y="451.0" width="177.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.4" y="462.0">java/util/concurrent/Fu..</text>
</g>
<g>
<title>org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call (902 samples, 15.06%)</title><rect x="22.4" y="435.0" width="177.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="25.4" y="446.0">org/openjdk/jmh/runner/..</text>
</g>
<g>
<title>org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call (902 samples, 15.06%)</title><rect x="22.4" y="419.0" width="177.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.4" y="430.0">org/openjdk/jmh/runner/..</text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (902 samples, 15.06%)</title><rect x="22.4" y="403.0" width="177.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.4" y="414.0">java/lang/reflect/Metho..</text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (902 samples, 15.06%)</title><rect x="22.4" y="387.0" width="177.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="25.4" y="398.0">jdk/internal/reflect/De..</text>
</g>
<g>
<title>jdk/internal/reflect/NativeMethodAccessorImpl.invoke (902 samples, 15.06%)</title><rect x="22.4" y="371.0" width="177.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="25.4" y="382.0">jdk/internal/reflect/Na..</text>
</g>
<g>
<title>jdk/internal/reflect/NativeMethodAccessorImpl.invoke0 (902 samples, 15.06%)</title><rect x="22.4" y="355.0" width="177.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.4" y="366.0">jdk/internal/reflect/Na..</text>
</g>
<g>
<title>me/serce/jmh_generated/AllocateBuffer1_direct_jmhTest.direct_AverageTime (902 samples, 15.06%)</title><rect x="22.4" y="339.0" width="177.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="25.4" y="350.0">me/serce/jmh_generated/..</text>
</g>
<g>
<title>me/serce/jmh_generated/AllocateBuffer1_direct_jmhTest.direct_avgt_jmhStub (902 samples, 15.06%)</title><rect x="22.4" y="323.0" width="177.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.4" y="334.0">me/serce/jmh_generated/..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (6 samples, 0.10%)</title><rect x="23.8" y="307.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="26.8" y="318.0"></text>
</g>
<g id="myid">
<title>me/serce/AllocateBuffer1.direct (882 samples, 14.73%)</title><rect x="25.0" y="307.0" width="173.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="28.0" y="318.0">me/serce/AllocateBuffe..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocateDirect (882 samples, 14.73%)</title><rect x="25.0" y="291.0" width="173.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.0" y="302.0">java/nio/ByteBuffer.al..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (857 samples, 14.31%)</title><rect x="29.9" y="275.0" width="168.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="32.9" y="286.0">java/nio/DirectByteBuf..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.03%)</title><rect x="32.7" y="259.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="35.7" y="270.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.03%)</title><rect x="32.7" y="243.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="35.7" y="254.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="32.7" y="227.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="35.7" y="238.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="32.7" y="211.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="35.7" y="222.0"></text>
</g>
<g>
<title>java/nio/Bits.reserveMemory (96 samples, 1.60%)</title><rect x="33.1" y="259.0" width="18.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="36.1" y="270.0"></text>
</g>
<g>
<title>java/nio/Bits.tryReserveMemory (96 samples, 1.60%)</title><rect x="33.1" y="243.0" width="18.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="36.1" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (12 samples, 0.20%)</title><rect x="52.0" y="259.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="55.0" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (12 samples, 0.20%)</title><rect x="52.0" y="243.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="55.0" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (12 samples, 0.20%)</title><rect x="52.0" y="227.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="55.0" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (12 samples, 0.20%)</title><rect x="52.0" y="211.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="55.0" y="222.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (8 samples, 0.13%)</title><rect x="52.6" y="195.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="55.6" y="206.0"></text>
</g>
<g>
<title>SATBMarkQueue::handle_completed_buffer() (8 samples, 0.13%)</title><rect x="52.6" y="179.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="55.6" y="190.0"></text>
</g>
<g>
<title>G1SATBMarkQueueSet::filter(SATBMarkQueue*) (8 samples, 0.13%)</title><rect x="52.6" y="163.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="55.6" y="174.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateMemory (507 samples, 8.47%)</title><rect x="54.3" y="259.0" width="99.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="57.3" y="270.0">jdk/internal..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateMemory0 (460 samples, 7.68%)</title><rect x="63.6" y="243.0" width="90.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="66.6" y="254.0">jdk/intern..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (104 samples, 1.74%)</title><rect x="69.9" y="227.0" width="20.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="72.9" y="238.0"></text>
</g>
<g>
<title>async_page_fault (10 samples, 0.17%)</title><rect x="86.4" y="211.0" width="2.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="89.4" y="222.0"></text>
</g>
<g>
<title>do_async_page_fault (10 samples, 0.17%)</title><rect x="86.4" y="195.0" width="2.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="89.4" y="206.0"></text>
</g>
<g>
<title>do_page_fault (10 samples, 0.17%)</title><rect x="86.4" y="179.0" width="2.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="89.4" y="190.0"></text>
</g>
<g>
<title>__do_page_fault (10 samples, 0.17%)</title><rect x="86.4" y="163.0" width="2.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="89.4" y="174.0"></text>
</g>
<g>
<title>do_user_addr_fault (10 samples, 0.17%)</title><rect x="86.4" y="147.0" width="2.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="89.4" y="158.0"></text>
</g>
<g>
<title>handle_mm_fault (8 samples, 0.13%)</title><rect x="86.8" y="131.0" width="1.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="89.8" y="142.0"></text>
</g>
<g>
<title>__handle_mm_fault (8 samples, 0.13%)</title><rect x="86.8" y="115.0" width="1.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="89.8" y="126.0"></text>
</g>
<g>
<title>do_anonymous_page (8 samples, 0.13%)</title><rect x="86.8" y="99.0" width="1.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="89.8" y="110.0"></text>
</g>
<g>
<title>alloc_pages_vma (5 samples, 0.08%)</title><rect x="86.8" y="83.0" width="1.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="89.8" y="94.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (4 samples, 0.07%)</title><rect x="86.8" y="67.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="89.8" y="78.0"></text>
</g>
<g>
<title>get_page_from_freelist (3 samples, 0.05%)</title><rect x="87.0" y="51.0" width="0.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="90.0" y="62.0"></text>
</g>
<g>
<title>clear_page_erms (2 samples, 0.03%)</title><rect x="87.0" y="35.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="90.0" y="46.0"></text>
</g>
<g>
<title>mem_cgroup_try_charge_delay (2 samples, 0.03%)</title><rect x="88.0" y="83.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="91.0" y="94.0"></text>
</g>
<g>
<title>mem_cgroup_try_charge (2 samples, 0.03%)</title><rect x="88.0" y="67.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="91.0" y="78.0"></text>
</g>
<g>
<title>get_mem_cgroup_from_mm (2 samples, 0.03%)</title><rect x="88.0" y="51.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="91.0" y="62.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (10 samples, 0.17%)</title><rect x="88.4" y="211.0" width="2.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="91.4" y="222.0"></text>
</g>
<g>
<title>do_syscall_64 (10 samples, 0.17%)</title><rect x="88.4" y="195.0" width="2.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="91.4" y="206.0"></text>
</g>
<g>
<title>__x64_sys_futex (8 samples, 0.13%)</title><rect x="88.8" y="179.0" width="1.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="91.8" y="190.0"></text>
</g>
<g>
<title>do_futex (8 samples, 0.13%)</title><rect x="88.8" y="163.0" width="1.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="91.8" y="174.0"></text>
</g>
<g>
<title>futex_wait (8 samples, 0.13%)</title><rect x="88.8" y="147.0" width="1.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="91.8" y="158.0"></text>
</g>
<g>
<title>futex_wait_setup (5 samples, 0.08%)</title><rect x="89.4" y="131.0" width="1.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="92.4" y="142.0"></text>
</g>
<g>
<title>get_futex_value_locked (3 samples, 0.05%)</title><rect x="89.8" y="115.0" width="0.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="92.8" y="126.0"></text>
</g>
<g>
<title>Unsafe_AllocateMemory0 (77 samples, 1.29%)</title><rect x="90.4" y="227.0" width="15.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="93.4" y="238.0"></text>
</g>
<g>
<title>os::malloc(unsigned long, MemoryType) (6 samples, 0.10%)</title><rect x="104.4" y="211.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="107.4" y="222.0"></text>
</g>
<g>
<title>__libc_malloc (244 samples, 4.07%)</title><rect x="105.6" y="227.0" width="48.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="108.6" y="238.0">__li..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (77 samples, 1.29%)</title><rect x="138.5" y="211.0" width="15.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="141.5" y="222.0"></text>
</g>
<g>
<title>do_syscall_64 (77 samples, 1.29%)</title><rect x="138.5" y="195.0" width="15.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="141.5" y="206.0"></text>
</g>
<g>
<title>__x64_sys_futex (35 samples, 0.58%)</title><rect x="146.7" y="179.0" width="6.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="149.7" y="190.0"></text>
</g>
<g>
<title>do_futex (31 samples, 0.52%)</title><rect x="147.5" y="163.0" width="6.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="150.5" y="174.0"></text>
</g>
<g>
<title>futex_wake (25 samples, 0.42%)</title><rect x="147.7" y="147.0" width="4.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="150.7" y="158.0"></text>
</g>
<g>
<title>_raw_spin_lock (2 samples, 0.03%)</title><rect x="149.5" y="131.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="152.5" y="142.0"></text>
</g>
<g>
<title>native_queued_spin_lock_slowpath (2 samples, 0.03%)</title><rect x="149.5" y="115.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="152.5" y="126.0"></text>
</g>
<g>
<title>get_futex_key (5 samples, 0.08%)</title><rect x="149.9" y="131.0" width="1.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="152.9" y="142.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.0 (2 samples, 0.03%)</title><rect x="150.5" y="115.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="153.5" y="126.0"></text>
</g>
<g>
<title>wake_up_q (8 samples, 0.13%)</title><rect x="151.1" y="131.0" width="1.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="154.1" y="142.0"></text>
</g>
<g>
<title>try_to_wake_up (8 samples, 0.13%)</title><rect x="151.1" y="115.0" width="1.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="154.1" y="126.0"></text>
</g>
<g>
<title>__lock_text_start (8 samples, 0.13%)</title><rect x="151.1" y="99.0" width="1.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="154.1" y="110.0"></text>
</g>
<g>
<title>hash_futex (4 samples, 0.07%)</title><rect x="152.6" y="147.0" width="0.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="155.6" y="158.0"></text>
</g>
<g>
<title>__mprotect (3 samples, 0.05%)</title><rect x="153.6" y="227.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="156.6" y="238.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.05%)</title><rect x="153.6" y="211.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="156.6" y="222.0"></text>
</g>
<g>
<title>do_syscall_64 (3 samples, 0.05%)</title><rect x="153.6" y="195.0" width="0.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="156.6" y="206.0"></text>
</g>
<g>
<title>__x64_sys_mprotect (2 samples, 0.03%)</title><rect x="153.8" y="179.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="156.8" y="190.0"></text>
</g>
<g>
<title>do_mprotect_pkey (2 samples, 0.03%)</title><rect x="153.8" y="163.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="156.8" y="174.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.setMemory (128 samples, 2.14%)</title><rect x="154.2" y="259.0" width="25.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="157.2" y="270.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.setMemory (128 samples, 2.14%)</title><rect x="154.2" y="243.0" width="25.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="157.2" y="254.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.setMemory0 (126 samples, 2.10%)</title><rect x="154.6" y="227.0" width="24.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="157.6" y="238.0">j..</text>
</g>
<g>
<title>Copy::fill_to_memory_atomic(void*, unsigned long, unsigned char) (4 samples, 0.07%)</title><rect x="161.5" y="211.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="164.5" y="222.0"></text>
</g>
<g>
<title>Unsafe_SetMemory0 (87 samples, 1.45%)</title><rect x="162.3" y="211.0" width="17.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="165.3" y="222.0"></text>
</g>
<g>
<title>Copy::fill_to_memory_atomic(void*, unsigned long, unsigned char) (24 samples, 0.40%)</title><rect x="174.7" y="195.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="177.7" y="206.0"></text>
</g>
<g>
<title>jdk/internal/ref/Cleaner.create (98 samples, 1.64%)</title><rect x="179.4" y="259.0" width="19.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="182.4" y="270.0"></text>
</g>
<g>
<title>jdk/internal/ref/Cleaner.add (98 samples, 1.64%)</title><rect x="179.4" y="243.0" width="19.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="182.4" y="254.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (9 samples, 0.15%)</title><rect x="197.0" y="227.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="200.0" y="238.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (8 samples, 0.13%)</title><rect x="197.2" y="211.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="200.2" y="222.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.64] (6 samples, 0.10%)</title><rect x="197.6" y="195.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="200.6" y="206.0"></text>
</g>
<g>
<title>org/openjdk/jmh/infra/Blackhole.consume (7 samples, 0.12%)</title><rect x="198.8" y="307.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="201.8" y="318.0"></text>
</g>
<g>
<title>java/lang/ref/Reference$ReferenceHandler.run (909 samples, 15.18%)</title><rect x="200.1" y="531.0" width="179.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="203.1" y="542.0">java/lang/ref/Reference..</text>
</g>
<g>
<title>java/lang/ref/Reference.processPendingReferences (905 samples, 15.11%)</title><rect x="200.3" y="515.0" width="178.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="203.3" y="526.0">java/lang/ref/Reference..</text>
</g>
<g>
<title>java/lang/Object.notifyAll (153 samples, 2.55%)</title><rect x="234.8" y="499.0" width="30.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="237.8" y="510.0">ja..</text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (2 samples, 0.03%)</title><rect x="240.1" y="483.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="243.1" y="494.0"></text>
</g>
<g>
<title>JVM_MonitorNotifyAll (118 samples, 1.97%)</title><rect x="240.5" y="483.0" width="23.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="243.5" y="494.0">J..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.03%)</title><rect x="241.9" y="467.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="244.9" y="478.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (10 samples, 0.17%)</title><rect x="242.5" y="467.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="245.5" y="478.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (17 samples, 0.28%)</title><rect x="244.5" y="467.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="247.5" y="478.0"></text>
</g>
<g>
<title>JavaThread::is_lock_owned(unsigned char*) const (2 samples, 0.03%)</title><rect x="247.8" y="467.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="250.8" y="478.0"></text>
</g>
<g>
<title>ObjectSynchronizer::notifyall(Handle, Thread*) (28 samples, 0.47%)</title><rect x="248.2" y="467.0" width="5.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="251.2" y="478.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (9 samples, 0.15%)</title><rect x="252.0" y="451.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="255.0" y="462.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.204] (19 samples, 0.32%)</title><rect x="253.7" y="467.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="256.7" y="478.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.203] (32 samples, 0.53%)</title><rect x="257.5" y="467.0" width="6.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="260.5" y="478.0"></text>
</g>
<g>
<title>ObjectSynchronizer::notifyall(Handle, Thread*) (2 samples, 0.03%)</title><rect x="263.8" y="483.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="266.8" y="494.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.204] (2 samples, 0.03%)</title><rect x="264.2" y="483.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="267.2" y="494.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.203] (2 samples, 0.03%)</title><rect x="264.6" y="483.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="267.6" y="494.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.freeMemory0 (5 samples, 0.08%)</title><rect x="265.0" y="499.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="268.0" y="510.0"></text>
</g>
<g>
<title>jdk/internal/ref/Cleaner.clean (572 samples, 9.55%)</title><rect x="265.9" y="499.0" width="112.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="268.9" y="510.0">jdk/internal/r..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer$Deallocator.run (447 samples, 7.46%)</title><rect x="267.3" y="483.0" width="88.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="270.3" y="494.0">java/nio/D..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.freeMemory (447 samples, 7.46%)</title><rect x="267.3" y="467.0" width="88.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="270.3" y="478.0">jdk/intern..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.freeMemory0 (440 samples, 7.35%)</title><rect x="268.7" y="451.0" width="86.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="271.7" y="462.0">jdk/intern..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (7 samples, 0.12%)</title><rect x="273.8" y="435.0" width="1.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="276.8" y="446.0"></text>
</g>
<g>
<title>Unsafe_FreeMemory0 (58 samples, 0.97%)</title><rect x="275.2" y="435.0" width="11.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="278.2" y="446.0"></text>
</g>
<g>
<title>os::free(void*) (5 samples, 0.08%)</title><rect x="285.6" y="419.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="288.6" y="430.0"></text>
</g>
<g>
<title>[unknown] (322 samples, 5.38%)</title><rect x="286.6" y="435.0" width="63.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="289.6" y="446.0">[unknown]</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (322 samples, 5.38%)</title><rect x="286.6" y="419.0" width="63.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="289.6" y="430.0">/usr/li..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (88 samples, 1.47%)</title><rect x="332.7" y="403.0" width="17.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="335.7" y="414.0"></text>
</g>
<g>
<title>do_syscall_64 (87 samples, 1.45%)</title><rect x="332.9" y="387.0" width="17.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="335.9" y="398.0"></text>
</g>
<g>
<title>__x64_sys_futex (40 samples, 0.67%)</title><rect x="342.0" y="371.0" width="7.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="345.0" y="382.0"></text>
</g>
<g>
<title>do_futex (37 samples, 0.62%)</title><rect x="342.6" y="355.0" width="7.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="345.6" y="366.0"></text>
</g>
<g>
<title>futex_wait (26 samples, 0.43%)</title><rect x="342.8" y="339.0" width="5.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="345.8" y="350.0"></text>
</g>
<g>
<title>futex_wait_queue_me (6 samples, 0.10%)</title><rect x="343.4" y="323.0" width="1.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="346.4" y="334.0"></text>
</g>
<g>
<title>schedule (6 samples, 0.10%)</title><rect x="343.4" y="307.0" width="1.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="346.4" y="318.0"></text>
</g>
<g>
<title>__sched_text_start (6 samples, 0.10%)</title><rect x="343.4" y="291.0" width="1.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="346.4" y="302.0"></text>
</g>
<g>
<title>finish_task_switch (6 samples, 0.10%)</title><rect x="343.4" y="275.0" width="1.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="346.4" y="286.0"></text>
</g>
<g>
<title>futex_wait_setup (16 samples, 0.27%)</title><rect x="344.6" y="323.0" width="3.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="347.6" y="334.0"></text>
</g>
<g>
<title>get_futex_key (3 samples, 0.05%)</title><rect x="345.3" y="307.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="348.3" y="318.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.0 (2 samples, 0.03%)</title><rect x="345.5" y="291.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="348.5" y="302.0"></text>
</g>
<g>
<title>get_futex_value_locked (8 samples, 0.13%)</title><rect x="346.1" y="307.0" width="1.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="349.1" y="318.0"></text>
</g>
<g>
<title>futex_wake (8 samples, 0.13%)</title><rect x="347.9" y="339.0" width="1.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="350.9" y="350.0"></text>
</g>
<g>
<title>wake_up_q (3 samples, 0.05%)</title><rect x="348.9" y="323.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="351.9" y="334.0"></text>
</g>
<g>
<title>try_to_wake_up (3 samples, 0.05%)</title><rect x="348.9" y="307.0" width="0.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="351.9" y="318.0"></text>
</g>
<g>
<title>__lock_text_start (3 samples, 0.05%)</title><rect x="348.9" y="291.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="351.9" y="302.0"></text>
</g>
<g>
<title>hash_futex (2 samples, 0.03%)</title><rect x="349.5" y="339.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="352.5" y="350.0"></text>
</g>
<g>
<title>cfree (21 samples, 0.35%)</title><rect x="350.1" y="435.0" width="4.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="353.1" y="446.0"></text>
</g>
<g>
<title>free@plt (2 samples, 0.03%)</title><rect x="354.2" y="435.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="357.2" y="446.0"></text>
</g>
<g>
<title>os::free(void*) (4 samples, 0.07%)</title><rect x="354.6" y="435.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="357.6" y="446.0"></text>
</g>
<g>
<title>jdk/internal/ref/Cleaner.remove (118 samples, 1.97%)</title><rect x="355.4" y="483.0" width="23.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="358.4" y="494.0">j..</text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (71 samples, 1.19%)</title><rect x="364.1" y="467.0" width="13.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="367.1" y="478.0"></text>
</g>
<g>
<title>SATBMarkQueue::handle_completed_buffer() (71 samples, 1.19%)</title><rect x="364.1" y="451.0" width="13.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="367.1" y="462.0"></text>
</g>
<g>
<title>G1SATBMarkQueueSet::filter(SATBMarkQueue*) (70 samples, 1.17%)</title><rect x="364.3" y="435.0" width="13.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="367.3" y="446.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.05%)</title><rect x="378.0" y="467.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="381.0" y="478.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (2 samples, 0.03%)</title><rect x="378.2" y="451.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="381.2" y="462.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.03%)</title><rect x="378.2" y="435.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="381.2" y="446.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.freeMemory0 (3 samples, 0.05%)</title><rect x="378.6" y="515.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="381.6" y="526.0"></text>
</g>
<g>
<title>start_thread (4,115 samples, 68.71%)</title><rect x="379.2" y="531.0" width="810.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="382.2" y="542.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (4,115 samples, 68.71%)</title><rect x="379.2" y="515.0" width="810.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="382.2" y="526.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (4,115 samples, 68.71%)</title><rect x="379.2" y="499.0" width="810.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="382.2" y="510.0">Thread::call_run()</text>
</g>
<g>
<title>ConcurrentGCThread::run() (229 samples, 3.82%)</title><rect x="379.2" y="483.0" width="45.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="382.2" y="494.0">Conc..</text>
</g>
<g>
<title>G1ConcurrentRefineThread::run_service() (228 samples, 3.81%)</title><rect x="379.4" y="467.0" width="44.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="382.4" y="478.0">G1Co..</text>
</g>
<g>
<title>G1DirtyCardQueueSet::refine_completed_buffer_concurrently(unsigned int, unsigned long) (223 samples, 3.72%)</title><rect x="379.6" y="451.0" width="44.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="382.6" y="462.0">G1Di..</text>
</g>
<g>
<title>G1RemSet::refine_card_concurrently(unsigned char*, unsigned int) (220 samples, 3.67%)</title><rect x="380.0" y="435.0" width="43.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="383.0" y="446.0">G1Re..</text>
</g>
<g>
<title>G1HotCardCache::insert(unsigned char*) (4 samples, 0.07%)</title><rect x="381.6" y="419.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="384.6" y="430.0"></text>
</g>
<g>
<title>G1CardCounts::add_card_count(unsigned char*) (3 samples, 0.05%)</title><rect x="381.6" y="403.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="384.6" y="414.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;false, G1ConcurrentRefineOopClosure&gt;(MemRegion, G1ConcurrentRefineOopClosure*) (193 samples, 3.22%)</title><rect x="382.4" y="419.0" width="38.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="385.4" y="430.0">boo..</text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWordImpl**, HeapWordImpl**, void const*) (83 samples, 1.39%)</title><rect x="385.5" y="403.0" width="16.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="388.5" y="414.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::alloc_block_work(HeapWordImpl***, unsigned long*, HeapWordImpl**, HeapWordImpl**) (4 samples, 0.07%)</title><rect x="391.2" y="387.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="394.2" y="398.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWordImpl* const*) const (3 samples, 0.05%)</title><rect x="392.0" y="387.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="395.0" y="398.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWordImpl* const*) const (47 samples, 0.78%)</title><rect x="392.6" y="387.0" width="9.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="395.6" y="398.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWordImpl* const*) const (23 samples, 0.38%)</title><rect x="397.4" y="371.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="400.4" y="382.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWordImpl* const*) const (8 samples, 0.13%)</title><rect x="401.9" y="403.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="404.9" y="414.0"></text>
</g>
<g>
<title>Klass::start_of_vtable() const (4 samples, 0.07%)</title><rect x="403.5" y="403.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="406.5" y="414.0"></text>
</g>
<g>
<title>MarkBitMap::get_next_marked_addr(HeapWordImpl* const*, HeapWordImpl* const*) const (3 samples, 0.05%)</title><rect x="404.3" y="403.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="407.3" y="414.0"></text>
</g>
<g>
<title>oopDesc::size() (4 samples, 0.07%)</title><rect x="404.8" y="403.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="407.8" y="414.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (2 samples, 0.03%)</title><rect x="405.6" y="403.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="408.6" y="414.0"></text>
</g>
<g>
<title>void G1ConcurrentRefineOopClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) [clone .isra.229] (4 samples, 0.07%)</title><rect x="406.0" y="403.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="409.0" y="414.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ConcurrentRefineOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1ConcurrentRefineOopClosure*, oopDesc*, Klass*) (2 samples, 0.03%)</title><rect x="406.8" y="403.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="409.8" y="414.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ConcurrentRefineOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceRefKlass, unsigned int&gt;(G1ConcurrentRefineOopClosure*, oopDesc*, Klass*) (67 samples, 1.12%)</title><rect x="407.2" y="403.0" width="13.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="410.2" y="414.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, unsigned int) (4 samples, 0.07%)</title><rect x="419.4" y="387.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="422.4" y="398.0"></text>
</g>
<g>
<title>oopDesc::size() (5 samples, 0.08%)</title><rect x="420.4" y="419.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="423.4" y="430.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (6 samples, 0.10%)</title><rect x="421.4" y="419.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="424.4" y="430.0"></text>
</g>
<g>
<title>void G1ConcurrentRefineOopClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) [clone .isra.229] (2 samples, 0.03%)</title><rect x="422.6" y="419.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="425.6" y="430.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ConcurrentRefineOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceRefKlass, unsigned int&gt;(G1ConcurrentRefineOopClosure*, oopDesc*, Klass*) (2 samples, 0.03%)</title><rect x="423.0" y="419.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="426.0" y="430.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_concurrently(unsigned char*, unsigned int) (3 samples, 0.05%)</title><rect x="423.6" y="451.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="426.6" y="462.0"></text>
</g>
<g>
<title>GangWorker::loop() (3,864 samples, 64.52%)</title><rect x="424.3" y="483.0" width="761.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="427.3" y="494.0">GangWorker::loop()</text>
</g>
<g>
<title>G1CMConcurrentMarkingTask::work(unsigned int) (787 samples, 13.14%)</title><rect x="424.3" y="467.0" width="155.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="427.3" y="478.0">G1CMConcurrentMarkin..</text>
</g>
<g>
<title>G1CMBitMapClosure::do_addr(HeapWordImpl**) (4 samples, 0.07%)</title><rect x="424.3" y="451.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="427.3" y="462.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (779 samples, 13.01%)</title><rect x="425.1" y="451.0" width="153.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="428.1" y="462.0">G1CMTask::do_markin..</text>
</g>
<g>
<title>G1CMBitMapClosure::do_addr(HeapWordImpl**) (373 samples, 6.23%)</title><rect x="427.5" y="435.0" width="73.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="430.5" y="446.0">G1CMBitM..</text>
</g>
<g>
<title>G1CMTask::drain_global_stack(bool) [clone .constprop.426] (9 samples, 0.15%)</title><rect x="430.9" y="419.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="433.9" y="430.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.157] (118 samples, 1.97%)</title><rect x="432.6" y="419.0" width="23.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="435.6" y="430.0">G..</text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (2 samples, 0.03%)</title><rect x="435.2" y="403.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="438.2" y="414.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (101 samples, 1.69%)</title><rect x="435.6" y="403.0" width="19.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="438.6" y="414.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (8 samples, 0.13%)</title><rect x="437.7" y="387.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="440.7" y="398.0"></text>
</g>
<g>
<title>G1CMTask::regular_clock_call() (2 samples, 0.03%)</title><rect x="439.3" y="387.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="442.3" y="398.0"></text>
</g>
<g>
<title>getrusage (2 samples, 0.03%)</title><rect x="439.3" y="371.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="442.3" y="382.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (3 samples, 0.05%)</title><rect x="439.9" y="387.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="442.9" y="398.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceRefKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (76 samples, 1.27%)</title><rect x="440.5" y="387.0" width="15.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="443.5" y="398.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (58 samples, 0.97%)</title><rect x="443.3" y="371.0" width="11.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="446.3" y="382.0"></text>
</g>
<g>
<title>oopDesc::size() (3 samples, 0.05%)</title><rect x="454.7" y="371.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="457.7" y="382.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceRefKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (2 samples, 0.03%)</title><rect x="455.5" y="403.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="458.5" y="414.0"></text>
</g>
<g>
<title>GenericTaskQueue&lt;G1TaskQueueEntry, (MemoryType)5, 131072u&gt;::pop_local(G1TaskQueueEntry volatile&amp;, unsigned int) (17 samples, 0.28%)</title><rect x="456.1" y="419.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="459.1" y="430.0"></text>
</g>
<g>
<title>bool G1CMTask::deal_with_reference&lt;unsigned int&gt;(unsigned int*) (3 samples, 0.05%)</title><rect x="459.4" y="419.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="462.4" y="430.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (205 samples, 3.42%)</title><rect x="460.2" y="419.0" width="40.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="463.2" y="430.0">voi..</text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (10 samples, 0.17%)</title><rect x="463.2" y="403.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="466.2" y="414.0"></text>
</g>
<g>
<title>G1CMTask::regular_clock_call() (3 samples, 0.05%)</title><rect x="465.1" y="403.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="468.1" y="414.0"></text>
</g>
<g>
<title>getrusage (2 samples, 0.03%)</title><rect x="465.1" y="387.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="468.1" y="398.0"></text>
</g>
<g>
<title>Klass::start_of_vtable() const (6 samples, 0.10%)</title><rect x="465.7" y="403.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="468.7" y="414.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (2 samples, 0.03%)</title><rect x="467.1" y="403.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="470.1" y="414.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (9 samples, 0.15%)</title><rect x="467.9" y="403.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="470.9" y="414.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceRefKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (157 samples, 2.62%)</title><rect x="469.7" y="403.0" width="30.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="472.7" y="414.0">vo..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;567350ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)4, 567350ul&gt;::oop_access_barrier(oopDesc*, void*, oopDesc*) (2 samples, 0.03%)</title><rect x="474.0" y="387.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="477.0" y="398.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;663670ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 663670ul&gt;::oop_access_barrier(void*) (2 samples, 0.03%)</title><rect x="474.4" y="387.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="477.4" y="398.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (118 samples, 1.97%)</title><rect x="474.8" y="387.0" width="23.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="477.8" y="398.0">G..</text>
</g>
<g>
<title>oopDesc::size() (6 samples, 0.10%)</title><rect x="496.5" y="371.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="499.5" y="382.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (2 samples, 0.03%)</title><rect x="497.6" y="371.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="500.6" y="382.0"></text>
</g>
<g>
<title>ReferenceProcessor::discover_reference(oopDesc*, ReferenceType) (12 samples, 0.20%)</title><rect x="498.0" y="387.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="501.0" y="398.0"></text>
</g>
<g>
<title>G1BarrierSet::write_ref_field_post_slow(unsigned char volatile*) (2 samples, 0.03%)</title><rect x="498.8" y="371.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="501.8" y="382.0"></text>
</g>
<g>
<title>G1CMIsAliveClosure::do_object_b(oopDesc*) (3 samples, 0.05%)</title><rect x="499.2" y="371.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="502.2" y="382.0"></text>
</g>
<g>
<title>G1CMSubjectToDiscoveryClosure::do_object_b(oopDesc*) (2 samples, 0.03%)</title><rect x="499.8" y="371.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="502.8" y="382.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceRefKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (2 samples, 0.03%)</title><rect x="500.6" y="419.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="503.6" y="430.0"></text>
</g>
<g>
<title>G1CMTask::drain_global_stack(bool) [clone .constprop.426] (6 samples, 0.10%)</title><rect x="501.0" y="435.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="504.0" y="446.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.157] (283 samples, 4.73%)</title><rect x="502.2" y="435.0" width="55.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="505.2" y="446.0">G1CMT..</text>
</g>
<g>
<title>bool G1CMTask::deal_with_reference&lt;unsigned int&gt;(unsigned int*) (2 samples, 0.03%)</title><rect x="506.3" y="419.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="509.3" y="430.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (3 samples, 0.05%)</title><rect x="506.7" y="419.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="509.7" y="430.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (256 samples, 4.27%)</title><rect x="507.3" y="419.0" width="50.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="510.3" y="430.0">void ..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;663670ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 663670ul&gt;::oop_access_barrier(void*) (2 samples, 0.03%)</title><rect x="509.3" y="403.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="512.3" y="414.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, int, bool) (5 samples, 0.08%)</title><rect x="509.7" y="403.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="512.7" y="414.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (21 samples, 0.35%)</title><rect x="510.6" y="403.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="513.6" y="414.0"></text>
</g>
<g>
<title>G1CMTask::regular_clock_call() (5 samples, 0.08%)</title><rect x="514.8" y="403.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="517.8" y="414.0"></text>
</g>
<g>
<title>getrusage (5 samples, 0.08%)</title><rect x="514.8" y="387.0" width="1.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="517.8" y="398.0"></text>
</g>
<g>
<title>Klass::start_of_vtable() const (3 samples, 0.05%)</title><rect x="515.8" y="403.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="518.8" y="414.0"></text>
</g>
<g>
<title>bool G1CMTask::deal_with_reference&lt;unsigned int&gt;(unsigned int*) (5 samples, 0.08%)</title><rect x="516.4" y="403.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="519.4" y="414.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (7 samples, 0.12%)</title><rect x="517.3" y="403.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="520.3" y="414.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceRefKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (198 samples, 3.31%)</title><rect x="518.7" y="403.0" width="39.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="521.7" y="414.0">voi..</text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (146 samples, 2.44%)</title><rect x="527.4" y="387.0" width="28.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="530.4" y="398.0">G1..</text>
</g>
<g>
<title>oopDesc::size() (6 samples, 0.10%)</title><rect x="554.8" y="371.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="557.8" y="382.0"></text>
</g>
<g>
<title>bool G1CMTask::deal_with_reference&lt;unsigned int&gt;(unsigned int*) (2 samples, 0.03%)</title><rect x="556.2" y="387.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="559.2" y="398.0"></text>
</g>
<g>
<title>oopDesc::size() (4 samples, 0.07%)</title><rect x="556.6" y="387.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="559.6" y="398.0"></text>
</g>
<g>
<title>G1CMTask::drain_satb_buffers() [clone .part.102] (67 samples, 1.12%)</title><rect x="557.9" y="435.0" width="13.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="560.9" y="446.0"></text>
</g>
<g>
<title>G1CMTask::regular_clock_call() (2 samples, 0.03%)</title><rect x="557.9" y="419.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="560.9" y="430.0"></text>
</g>
<g>
<title>getrusage (2 samples, 0.03%)</title><rect x="557.9" y="403.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="560.9" y="414.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.03%)</title><rect x="557.9" y="387.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="560.9" y="398.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.03%)</title><rect x="557.9" y="371.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="560.9" y="382.0"></text>
</g>
<g>
<title>__x64_sys_getrusage (2 samples, 0.03%)</title><rect x="557.9" y="355.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="560.9" y="366.0"></text>
</g>
<g>
<title>__do_sys_getrusage (2 samples, 0.03%)</title><rect x="557.9" y="339.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="560.9" y="350.0"></text>
</g>
<g>
<title>getrusage (2 samples, 0.03%)</title><rect x="557.9" y="323.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="560.9" y="334.0"></text>
</g>
<g>
<title>task_cputime_adjusted (2 samples, 0.03%)</title><rect x="557.9" y="307.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="560.9" y="318.0"></text>
</g>
<g>
<title>cputime_adjust (2 samples, 0.03%)</title><rect x="557.9" y="291.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="560.9" y="302.0"></text>
</g>
<g>
<title>__lock_text_start (2 samples, 0.03%)</title><rect x="557.9" y="275.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="560.9" y="286.0"></text>
</g>
<g>
<title>SATBMarkQueueSet::apply_closure_to_completed_buffer(SATBBufferClosure*) (65 samples, 1.09%)</title><rect x="558.3" y="419.0" width="12.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="561.3" y="430.0"></text>
</g>
<g>
<title>G1CMSATBBufferClosure::do_buffer(void**, unsigned long) (62 samples, 1.04%)</title><rect x="558.3" y="403.0" width="12.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="561.3" y="414.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (53 samples, 0.88%)</title><rect x="560.1" y="387.0" width="10.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="563.1" y="398.0"></text>
</g>
<g>
<title>oopDesc::size() (4 samples, 0.07%)</title><rect x="569.6" y="371.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="572.6" y="382.0"></text>
</g>
<g>
<title>GenericTaskQueue&lt;G1TaskQueueEntry, (MemoryType)5, 131072u&gt;::pop_local(G1TaskQueueEntry volatile&amp;, unsigned int) (30 samples, 0.50%)</title><rect x="571.3" y="435.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="574.3" y="446.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (2 samples, 0.03%)</title><rect x="577.2" y="435.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="580.2" y="446.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (5 samples, 0.08%)</title><rect x="577.6" y="435.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="580.6" y="446.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (4 samples, 0.07%)</title><rect x="578.6" y="451.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="581.6" y="462.0"></text>
</g>
<g>
<title>G1CMRefProcTaskProxy::work(unsigned int) (3 samples, 0.05%)</title><rect x="579.4" y="467.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="582.4" y="478.0"></text>
</g>
<g>
<title>RefProcPhase4Task::work(unsigned int, BoolObjectClosure&amp;, OopClosure&amp;, VoidClosure&amp;) (3 samples, 0.05%)</title><rect x="579.4" y="451.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="582.4" y="462.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;573558ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)3, 573558ul&gt;::oop_access_barrier(oopDesc*, long) (2 samples, 0.03%)</title><rect x="579.4" y="435.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="582.4" y="446.0"></text>
</g>
<g>
<title>G1CMRootRegionScanTask::work(unsigned int) (14 samples, 0.23%)</title><rect x="580.0" y="467.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="583.0" y="478.0"></text>
</g>
<g>
<title>G1ConcurrentMark::mark_in_next_bitmap(unsigned int, oopDesc*) (2 samples, 0.03%)</title><rect x="580.6" y="451.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="583.6" y="462.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RootRegionScanClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RootRegionScanClosure*, oopDesc*, Klass*) (2 samples, 0.03%)</title><rect x="581.4" y="451.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="584.4" y="462.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RootRegionScanClosure&gt;::Table::oop_oop_iterate&lt;InstanceRefKlass, unsigned int&gt;(G1RootRegionScanClosure*, oopDesc*, Klass*) (5 samples, 0.08%)</title><rect x="581.8" y="451.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="584.8" y="462.0"></text>
</g>
<g>
<title>G1EvacuateRegionsBaseTask::work(unsigned int) (1,065 samples, 17.78%)</title><rect x="582.8" y="467.0" width="209.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="585.8" y="478.0">G1EvacuateRegionsBaseTask::..</text>
</g>
<g>
<title>G1EvacuateRegionsTask::evacuate_live_objects(G1ParScanThreadState*, unsigned int) (973 samples, 16.25%)</title><rect x="582.8" y="451.0" width="191.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="585.8" y="462.0">G1EvacuateRegionsTask::ev..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (973 samples, 16.25%)</title><rect x="582.8" y="435.0" width="191.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="585.8" y="446.0">G1ParEvacuateFollowersClo..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(G1HeapRegionAttr, oopDesc*, markOopDesc*) (3 samples, 0.05%)</title><rect x="583.0" y="419.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="586.0" y="430.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (969 samples, 16.18%)</title><rect x="583.5" y="419.0" width="191.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="586.5" y="430.0">G1ParScanThreadState::tri..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(G1HeapRegionAttr, oopDesc*, markOopDesc*) (651 samples, 10.87%)</title><rect x="642.9" y="403.0" width="128.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="645.9" y="414.0">G1ParScanThreadS..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;663670ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 663670ul&gt;::oop_access_barrier(void*) (11 samples, 0.18%)</title><rect x="693.5" y="387.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="696.5" y="398.0"></text>
</g>
<g>
<title>G1PLABAllocator::allocate_direct_or_new_plab(G1HeapRegionAttr, unsigned long, bool*) (2 samples, 0.03%)</title><rect x="695.9" y="387.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="698.9" y="398.0"></text>
</g>
<g>
<title>G1Allocator::old_attempt_allocation(unsigned long, unsigned long, unsigned long*) (2 samples, 0.03%)</title><rect x="695.9" y="371.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="698.9" y="382.0"></text>
</g>
<g>
<title>G1ParScanThreadState::handle_evacuation_failure_par(oopDesc*, markOopDesc*) (45 samples, 0.75%)</title><rect x="696.2" y="387.0" width="8.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="699.2" y="398.0"></text>
</g>
<g>
<title>G1CollectedHeap::preserve_mark_during_evac_failure(unsigned int, oopDesc*, markOopDesc*) (7 samples, 0.12%)</title><rect x="696.2" y="371.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="699.2" y="382.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceRefKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (37 samples, 0.62%)</title><rect x="697.8" y="371.0" width="7.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="700.8" y="382.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;567350ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)4, 567350ul&gt;::oop_access_barrier(oopDesc*, void*, oopDesc*) (4 samples, 0.07%)</title><rect x="701.4" y="355.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="704.4" y="366.0"></text>
</g>
<g>
<title>ReferenceProcessor::discover_reference(oopDesc*, ReferenceType) (11 samples, 0.18%)</title><rect x="702.4" y="355.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="705.4" y="366.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.03%)</title><rect x="704.7" y="355.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="707.7" y="366.0"></text>
</g>
<g>
<title>Klass::start_of_vtable() const (4 samples, 0.07%)</title><rect x="705.1" y="387.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="708.1" y="398.0"></text>
</g>
<g>
<title>ReferenceProcessor::discover_reference(oopDesc*, ReferenceType) (2 samples, 0.03%)</title><rect x="705.9" y="387.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="708.9" y="398.0"></text>
</g>
<g>
<title>void G1ScanEvacuatedObjClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (16 samples, 0.27%)</title><rect x="706.3" y="387.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="709.3" y="398.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (47 samples, 0.78%)</title><rect x="709.4" y="387.0" width="9.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="712.4" y="398.0"></text>
</g>
<g>
<title>Klass::start_of_vtable() const (4 samples, 0.07%)</title><rect x="717.9" y="371.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="720.9" y="382.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceRefKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (266 samples, 4.44%)</title><rect x="718.7" y="387.0" width="52.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="721.7" y="398.0">void ..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;567350ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)4, 567350ul&gt;::oop_access_barrier(oopDesc*, void*, oopDesc*) (11 samples, 0.18%)</title><rect x="748.7" y="371.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="751.7" y="382.0"></text>
</g>
<g>
<title>G1STWSubjectToDiscoveryClosure::do_object_b(oopDesc*) (22 samples, 0.37%)</title><rect x="751.0" y="371.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="754.0" y="382.0"></text>
</g>
<g>
<title>ReferenceProcessor::discover_reference(oopDesc*, ReferenceType) (42 samples, 0.70%)</title><rect x="755.4" y="371.0" width="8.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="758.4" y="382.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (4 samples, 0.07%)</title><rect x="761.7" y="355.0" width="0.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="764.7" y="366.0"></text>
</g>
<g>
<title>G1STWSubjectToDiscoveryClosure::do_object_b(oopDesc*) (4 samples, 0.07%)</title><rect x="762.6" y="355.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="765.6" y="366.0"></text>
</g>
<g>
<title>__tls_get_addr (7 samples, 0.12%)</title><rect x="763.8" y="371.0" width="1.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="766.8" y="382.0"></text>
</g>
<g>
<title>void G1ScanEvacuatedObjClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (30 samples, 0.50%)</title><rect x="765.2" y="371.0" width="5.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="768.2" y="382.0"></text>
</g>
<g>
<title>G1ParScanThreadState::handle_evacuation_failure_par(oopDesc*, markOopDesc*) (6 samples, 0.10%)</title><rect x="771.1" y="403.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="774.1" y="414.0"></text>
</g>
<g>
<title>void G1ScanEvacuatedObjClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (2 samples, 0.03%)</title><rect x="772.3" y="403.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="775.3" y="414.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (3 samples, 0.05%)</title><rect x="772.7" y="403.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="775.7" y="414.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceRefKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (6 samples, 0.10%)</title><rect x="773.3" y="403.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="776.3" y="414.0"></text>
</g>
<g>
<title>G1EvacuateRegionsTask::scan_roots(G1ParScanThreadState*, unsigned int) (91 samples, 1.52%)</title><rect x="774.5" y="451.0" width="17.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="777.5" y="462.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (91 samples, 1.52%)</title><rect x="774.5" y="435.0" width="17.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="777.5" y="446.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(G1CardTableEntryClosure*, unsigned int) (91 samples, 1.52%)</title><rect x="774.5" y="419.0" width="17.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="777.5" y="430.0"></text>
</g>
<g>
<title>G1DirtyCardQueueSet::apply_closure_during_gc(G1CardTableEntryClosure*, unsigned int) (90 samples, 1.50%)</title><rect x="774.5" y="403.0" width="17.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="777.5" y="414.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(unsigned char*, unsigned int) (89 samples, 1.49%)</title><rect x="774.7" y="387.0" width="17.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="777.7" y="398.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(unsigned char*, G1ScanCardClosure*) (88 samples, 1.47%)</title><rect x="774.9" y="371.0" width="17.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="777.9" y="382.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanCardClosure&gt;(MemRegion, G1ScanCardClosure*) (83 samples, 1.39%)</title><rect x="774.9" y="355.0" width="16.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="777.9" y="366.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWordImpl**, HeapWordImpl**, void const*) (21 samples, 0.35%)</title><rect x="776.6" y="339.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="779.6" y="350.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWordImpl* const*) const (14 samples, 0.23%)</title><rect x="778.0" y="323.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="781.0" y="334.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWordImpl* const*) const (8 samples, 0.13%)</title><rect x="779.2" y="307.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="782.2" y="318.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWordImpl* const*) const (3 samples, 0.05%)</title><rect x="780.8" y="339.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="783.8" y="350.0"></text>
</g>
<g>
<title>Klass::start_of_vtable() const (2 samples, 0.03%)</title><rect x="781.4" y="339.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="784.4" y="350.0"></text>
</g>
<g>
<title>void G1ScanCardClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (3 samples, 0.05%)</title><rect x="782.0" y="339.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="785.0" y="350.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanCardClosure&gt;::Table::oop_oop_iterate&lt;InstanceRefKlass, unsigned int&gt;(G1ScanCardClosure*, oopDesc*, Klass*) (44 samples, 0.73%)</title><rect x="782.5" y="339.0" width="8.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="785.5" y="350.0"></text>
</g>
<g>
<title>void G1ScanCardClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (32 samples, 0.53%)</title><rect x="784.9" y="323.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="787.9" y="334.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (2 samples, 0.03%)</title><rect x="791.4" y="355.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="794.4" y="366.0"></text>
</g>
<g>
<title>G1FullGCAdjustTask::work(unsigned int) (357 samples, 5.96%)</title><rect x="792.6" y="467.0" width="70.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="795.6" y="478.0">G1FullGC..</text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (357 samples, 5.96%)</title><rect x="792.6" y="451.0" width="70.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="795.6" y="462.0">HeapRegi..</text>
</g>
<g>
<title>G1AdjustRegionClosure::do_heap_region(HeapRegion*) (348 samples, 5.81%)</title><rect x="792.6" y="435.0" width="68.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="795.6" y="446.0">G1Adjus..</text>
</g>
<g>
<title>Klass::start_of_vtable() const (6 samples, 0.10%)</title><rect x="815.4" y="419.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="818.4" y="430.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1AdjustClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1AdjustClosure*, oopDesc*, Klass*) (6 samples, 0.10%)</title><rect x="816.6" y="419.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="819.6" y="430.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1AdjustClosure&gt;::Table::oop_oop_iterate&lt;InstanceRefKlass, unsigned int&gt;(G1AdjustClosure*, oopDesc*, Klass*) (220 samples, 3.67%)</title><rect x="817.8" y="419.0" width="43.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="820.8" y="430.0">void..</text>
</g>
<g>
<title>Klass::start_of_vtable() const (3 samples, 0.05%)</title><rect x="860.4" y="403.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="863.4" y="414.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1AdjustClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1AdjustClosure*, oopDesc*, Klass*) (6 samples, 0.10%)</title><rect x="861.2" y="435.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="864.2" y="446.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1AdjustClosure&gt;::Table::oop_oop_iterate&lt;InstanceRefKlass, unsigned int&gt;(G1AdjustClosure*, oopDesc*, Klass*) (3 samples, 0.05%)</title><rect x="862.3" y="435.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="865.3" y="446.0"></text>
</g>
<g>
<title>G1FullGCCompactTask::work(unsigned int) (180 samples, 3.01%)</title><rect x="862.9" y="467.0" width="35.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="865.9" y="478.0">G1F..</text>
</g>
<g>
<title>G1FullGCCompactTask::G1CompactRegionClosure::apply(oopDesc*) (5 samples, 0.08%)</title><rect x="862.9" y="451.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="865.9" y="462.0"></text>
</g>
<g>
<title>G1FullGCCompactTask::compact_region(HeapRegion*) (175 samples, 2.92%)</title><rect x="863.9" y="451.0" width="34.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="866.9" y="462.0">G1..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (26 samples, 0.43%)</title><rect x="875.5" y="435.0" width="5.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="878.5" y="446.0"></text>
</g>
<g>
<title>G1FullGCCompactTask::G1CompactRegionClosure::apply(oopDesc*) (89 samples, 1.49%)</title><rect x="880.7" y="435.0" width="17.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="883.7" y="446.0"></text>
</g>
<g>
<title>G1FullGCMarkTask::work(unsigned int) (1,074 samples, 17.93%)</title><rect x="898.4" y="467.0" width="211.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="901.4" y="478.0">G1FullGCMarkTask::work(unsig..</text>
</g>
<g>
<title>G1FullGCMarker::complete_marking(GenericTaskQueueSet&lt;OverflowTaskQueue&lt;oopDesc*, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;*, GenericTaskQueueSet&lt;OverflowTaskQueue&lt;ObjArrayTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;*, ParallelTaskTerminator*) (1,069 samples, 17.85%)</title><rect x="898.4" y="451.0" width="210.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="901.4" y="462.0">G1FullGCMarker::complete_mar..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;663670ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 663670ul&gt;::oop_access_barrier(void*) (2 samples, 0.03%)</title><rect x="914.6" y="435.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="917.6" y="446.0"></text>
</g>
<g>
<title>ClassLoaderData::holder_no_keepalive() const (5 samples, 0.08%)</title><rect x="914.9" y="435.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="917.9" y="446.0"></text>
</g>
<g>
<title>G1CMBitMap::check_mark(HeapWordImpl**) (19 samples, 0.32%)</title><rect x="915.9" y="435.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="918.9" y="446.0"></text>
</g>
<g>
<title>Klass::start_of_vtable() const (4 samples, 0.07%)</title><rect x="919.7" y="435.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="922.7" y="446.0"></text>
</g>
<g>
<title>OWSTTaskTerminator::offer_termination(TerminatorTerminator*) (545 samples, 9.10%)</title><rect x="920.5" y="435.0" width="107.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="923.5" y="446.0">OWSTTaskTermi..</text>
</g>
<g>
<title>OWSTTaskTerminator::do_spin_master_work(TerminatorTerminator*) (94 samples, 1.57%)</title><rect x="920.7" y="419.0" width="18.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="923.7" y="430.0"></text>
</g>
<g>
<title>SpinPause (446 samples, 7.45%)</title><rect x="939.2" y="419.0" width="87.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="942.2" y="430.0">SpinPause</text>
</g>
<g>
<title>__sched_yield (4 samples, 0.07%)</title><rect x="1027.1" y="419.0" width="0.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1030.1" y="430.0"></text>
</g>
<g>
<title>ReferenceProcessor::discover_reference(oopDesc*, ReferenceType) (2 samples, 0.03%)</title><rect x="1027.8" y="435.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1030.8" y="446.0"></text>
</g>
<g>
<title>void G1FullGCMarker::mark_and_push&lt;unsigned int&gt;(unsigned int*) [clone .isra.97] (15 samples, 0.25%)</title><rect x="1028.2" y="435.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1031.2" y="446.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1MarkAndPushClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1MarkAndPushClosure*, oopDesc*, Klass*) (10 samples, 0.17%)</title><rect x="1031.2" y="435.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1034.2" y="446.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1MarkAndPushClosure&gt;::Table::oop_oop_iterate&lt;InstanceRefKlass, unsigned int&gt;(G1MarkAndPushClosure*, oopDesc*, Klass*) (384 samples, 6.41%)</title><rect x="1033.4" y="435.0" width="75.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1036.4" y="446.0">void Oop..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;567350ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)4, 567350ul&gt;::oop_access_barrier(oopDesc*, void*, oopDesc*) (20 samples, 0.33%)</title><rect x="1083.6" y="419.0" width="3.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1086.6" y="430.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;663670ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 663670ul&gt;::oop_access_barrier(void*) (3 samples, 0.05%)</title><rect x="1087.7" y="419.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1090.7" y="430.0"></text>
</g>
<g>
<title>G1CMBitMap::check_mark(HeapWordImpl**) (2 samples, 0.03%)</title><rect x="1088.5" y="419.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1091.5" y="430.0"></text>
</g>
<g>
<title>G1FullGCSubjectToDiscoveryClosure::do_object_b(oopDesc*) (3 samples, 0.05%)</title><rect x="1088.9" y="419.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1091.9" y="430.0"></text>
</g>
<g>
<title>G1IsAliveClosure::do_object_b(oopDesc*) (2 samples, 0.03%)</title><rect x="1089.5" y="419.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1092.5" y="430.0"></text>
</g>
<g>
<title>ReferenceProcessor::discover_reference(oopDesc*, ReferenceType) (94 samples, 1.57%)</title><rect x="1089.9" y="419.0" width="18.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1092.9" y="430.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (4 samples, 0.07%)</title><rect x="1099.0" y="403.0" width="0.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1102.0" y="414.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;567350ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)4, 567350ul&gt;::oop_access_barrier(oopDesc*, void*, oopDesc*) (12 samples, 0.20%)</title><rect x="1099.8" y="403.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1102.8" y="414.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (4 samples, 0.07%)</title><rect x="1101.3" y="387.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1104.3" y="398.0"></text>
</g>
<g>
<title>G1BarrierSet::write_ref_field_post_slow(unsigned char volatile*) (18 samples, 0.30%)</title><rect x="1102.3" y="403.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1105.3" y="414.0"></text>
</g>
<g>
<title>G1IsAliveClosure::do_object_b(oopDesc*) (8 samples, 0.13%)</title><rect x="1106.1" y="403.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1109.1" y="414.0"></text>
</g>
<g>
<title>__tls_get_addr (4 samples, 0.07%)</title><rect x="1107.6" y="403.0" width="0.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1110.6" y="414.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1MarkAndPushClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1MarkAndPushClosure*, oopDesc*, Klass*) (2 samples, 0.03%)</title><rect x="1109.2" y="451.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1112.2" y="462.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1MarkAndPushClosure&gt;::Table::oop_oop_iterate&lt;InstanceRefKlass, unsigned int&gt;(G1MarkAndPushClosure*, oopDesc*, Klass*) (2 samples, 0.03%)</title><rect x="1109.6" y="451.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1112.6" y="462.0"></text>
</g>
<g>
<title>G1FullGCPrepareTask::work(unsigned int) (148 samples, 2.47%)</title><rect x="1110.0" y="467.0" width="29.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1113.0" y="478.0">G1..</text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (148 samples, 2.47%)</title><rect x="1110.0" y="451.0" width="29.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1113.0" y="462.0">He..</text>
</g>
<g>
<title>G1FullGCPrepareTask::G1CalculatePointersClosure::do_heap_region(HeapRegion*) (148 samples, 2.47%)</title><rect x="1110.0" y="435.0" width="29.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1113.0" y="446.0">G1..</text>
</g>
<g>
<title>G1FullGCPrepareTask::G1CalculatePointersClosure::prepare_for_compaction(HeapRegion*) (148 samples, 2.47%)</title><rect x="1110.0" y="419.0" width="29.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1113.0" y="430.0">G1..</text>
</g>
<g>
<title>G1FullGCCompactionPoint::forward(oopDesc*, unsigned long) (43 samples, 0.72%)</title><rect x="1130.7" y="403.0" width="8.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1133.7" y="414.0"></text>
</g>
<g>
<title>G1ContiguousSpace::cross_threshold(HeapWordImpl**, HeapWordImpl**) (11 samples, 0.18%)</title><rect x="1137.0" y="387.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1140.0" y="398.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::alloc_block_work(HeapWordImpl***, unsigned long*, HeapWordImpl**, HeapWordImpl**) (7 samples, 0.12%)</title><rect x="1137.8" y="371.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1140.8" y="382.0"></text>
</g>
<g>
<title>G1FullGCReferenceProcessingExecutor::G1RefProcTaskProxy::work(unsigned int) (56 samples, 0.94%)</title><rect x="1139.2" y="467.0" width="11.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1142.2" y="478.0"></text>
</g>
<g>
<title>RefProcPhase4Task::work(unsigned int, BoolObjectClosure&amp;, OopClosure&amp;, VoidClosure&amp;) (56 samples, 0.94%)</title><rect x="1139.2" y="451.0" width="11.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1142.2" y="462.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;565366ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)1, 565366ul&gt;::oop_access_barrier(oopDesc*, long, oopDesc*) (3 samples, 0.05%)</title><rect x="1139.2" y="435.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1142.2" y="446.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;573558ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)3, 573558ul&gt;::oop_access_barrier(oopDesc*, long) (8 samples, 0.13%)</title><rect x="1139.8" y="435.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1142.8" y="446.0"></text>
</g>
<g>
<title>G1BarrierSet::write_ref_field_post_slow(unsigned char volatile*) (12 samples, 0.20%)</title><rect x="1141.3" y="435.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1144.3" y="446.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_phantom_refs_work(DiscoveredList&amp;, BoolObjectClosure*, OopClosure*, VoidClosure*) (33 samples, 0.55%)</title><rect x="1143.7" y="435.0" width="6.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1146.7" y="446.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;565366ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)1, 565366ul&gt;::oop_access_barrier(oopDesc*, long, oopDesc*) (9 samples, 0.15%)</title><rect x="1147.0" y="419.0" width="1.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1150.0" y="430.0"></text>
</g>
<g>
<title>G1IsAliveClosure::do_object_b(oopDesc*) (6 samples, 0.10%)</title><rect x="1149.0" y="419.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1152.0" y="430.0"></text>
</g>
<g>
<title>G1ParRemoveSelfForwardPtrsTask::work(unsigned int) (73 samples, 1.22%)</title><rect x="1150.2" y="467.0" width="14.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.2" y="478.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_incremental_part_from(HeapRegionClosure*, unsigned int, unsigned int) const (73 samples, 1.22%)</title><rect x="1150.2" y="451.0" width="14.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1153.2" y="462.0"></text>
</g>
<g>
<title>RemoveSelfForwardPtrHRClosure::do_heap_region(HeapRegion*) (73 samples, 1.22%)</title><rect x="1150.2" y="435.0" width="14.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.2" y="446.0"></text>
</g>
<g>
<title>G1ContiguousSpace::object_iterate(ObjectClosure*) (65 samples, 1.09%)</title><rect x="1150.4" y="419.0" width="12.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1153.4" y="430.0"></text>
</g>
<g>
<title>G1ContiguousSpace::cross_threshold(HeapWordImpl**, HeapWordImpl**) (2 samples, 0.03%)</title><rect x="1151.4" y="403.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1154.4" y="414.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWordImpl* const*) const (4 samples, 0.07%)</title><rect x="1151.8" y="403.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1154.8" y="414.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWordImpl* const*) const (11 samples, 0.18%)</title><rect x="1152.6" y="403.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.6" y="414.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWordImpl* const*) const (3 samples, 0.05%)</title><rect x="1154.1" y="387.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1157.1" y="398.0"></text>
</g>
<g>
<title>RemoveSelfForwardPtrObjClosure::do_object(oopDesc*) (43 samples, 0.72%)</title><rect x="1154.7" y="403.0" width="8.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1157.7" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_objects(HeapWordImpl**, unsigned long, bool) (8 samples, 0.13%)</title><rect x="1157.7" y="387.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1160.7" y="398.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (2 samples, 0.03%)</title><rect x="1158.3" y="371.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1161.3" y="382.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWordImpl**) const (2 samples, 0.03%)</title><rect x="1158.7" y="371.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1161.7" y="382.0"></text>
</g>
<g>
<title>MarkBitMap::do_clear(MemRegion, bool) (4 samples, 0.07%)</title><rect x="1160.1" y="387.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1163.1" y="398.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;UpdateRSetDeferred&gt;::Table::oop_oop_iterate&lt;InstanceRefKlass, unsigned int&gt;(UpdateRSetDeferred*, oopDesc*, Klass*) (11 samples, 0.18%)</title><rect x="1161.0" y="387.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.0" y="398.0"></text>
</g>
<g>
<title>RemoveSelfForwardPtrObjClosure::do_object(oopDesc*) (6 samples, 0.10%)</title><rect x="1163.4" y="419.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.4" y="430.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::work(unsigned int) (35 samples, 0.58%)</title><rect x="1164.6" y="467.0" width="6.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.6" y="478.0"></text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (35 samples, 0.58%)</title><rect x="1164.6" y="451.0" width="6.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.6" y="462.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::do_heap_region(HeapRegion*) (34 samples, 0.57%)</title><rect x="1164.6" y="435.0" width="6.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.6" y="446.0"></text>
</g>
<g>
<title>HeapRegionRemSet::add_reference(void*, unsigned int) [clone .part.52] (2 samples, 0.03%)</title><rect x="1167.1" y="419.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.1" y="430.0"></text>
</g>
<g>
<title>MarkBitMap::get_next_marked_addr(HeapWordImpl* const*, HeapWordImpl* const*) const (2 samples, 0.03%)</title><rect x="1167.7" y="419.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.7" y="430.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;InstanceRefKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (15 samples, 0.25%)</title><rect x="1168.3" y="419.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.3" y="430.0"></text>
</g>
<g>
<title>HeapRegionRemSet::add_reference(void*, unsigned int) [clone .part.52] (4 samples, 0.07%)</title><rect x="1168.7" y="403.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.7" y="414.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, unsigned int) (5 samples, 0.08%)</title><rect x="1169.5" y="403.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.5" y="414.0"></text>
</g>
<g>
<title>BitMap::par_at_put(unsigned long, bool) (2 samples, 0.03%)</title><rect x="1170.1" y="387.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.1" y="398.0"></text>
</g>
<g>
<title>void G1RebuildRemSetClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) [clone .isra.231] (4 samples, 0.07%)</title><rect x="1170.5" y="403.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.5" y="414.0"></text>
</g>
<g>
<title>G1STWRefProcTaskProxy::work(unsigned int) (57 samples, 0.95%)</title><rect x="1171.9" y="467.0" width="11.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.9" y="478.0"></text>
</g>
<g>
<title>RefProcPhase4Task::work(unsigned int, BoolObjectClosure&amp;, OopClosure&amp;, VoidClosure&amp;) (57 samples, 0.95%)</title><rect x="1171.9" y="451.0" width="11.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.9" y="462.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;573558ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)3, 573558ul&gt;::oop_access_barrier(oopDesc*, long) (5 samples, 0.08%)</title><rect x="1171.9" y="435.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.9" y="446.0"></text>
</g>
<g>
<title>G1STWIsAliveClosure::do_object_b(oopDesc*) (2 samples, 0.03%)</title><rect x="1173.1" y="435.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.1" y="446.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_phantom_refs_work(DiscoveredList&amp;, BoolObjectClosure*, OopClosure*, VoidClosure*) (49 samples, 0.82%)</title><rect x="1173.4" y="435.0" width="9.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.4" y="446.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;565366ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)1, 565366ul&gt;::oop_access_barrier(oopDesc*, long, oopDesc*) (2 samples, 0.03%)</title><rect x="1174.0" y="419.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.0" y="430.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (10 samples, 0.17%)</title><rect x="1174.6" y="419.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.6" y="430.0"></text>
</g>
<g>
<title>OWSTTaskTerminator::offer_termination(TerminatorTerminator*) (10 samples, 0.17%)</title><rect x="1174.6" y="403.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.6" y="414.0"></text>
</g>
<g>
<title>OWSTTaskTerminator::do_spin_master_work(TerminatorTerminator*) (2 samples, 0.03%)</title><rect x="1174.6" y="387.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.6" y="398.0"></text>
</g>
<g>
<title>SpinPause (7 samples, 0.12%)</title><rect x="1175.0" y="387.0" width="1.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1178.0" y="398.0"></text>
</g>
<g>
<title>G1STWIsAliveClosure::do_object_b(oopDesc*) (33 samples, 0.55%)</title><rect x="1176.6" y="419.0" width="6.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.6" y="430.0"></text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (3 samples, 0.05%)</title><rect x="1183.1" y="467.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.1" y="478.0"></text>
</g>
<g>
<title>G1ClearBitMapTask::G1ClearBitmapHRClosure::do_heap_region(HeapRegion*) (3 samples, 0.05%)</title><rect x="1183.1" y="451.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.1" y="462.0"></text>
</g>
<g>
<title>MarkBitMap::do_clear(MemRegion, bool) (3 samples, 0.05%)</title><rect x="1183.1" y="435.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.1" y="446.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (3 samples, 0.05%)</title><rect x="1183.1" y="419.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1186.1" y="430.0"></text>
</g>
<g>
<title>ParRestoreTask::work(unsigned int) (10 samples, 0.17%)</title><rect x="1183.7" y="467.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.7" y="478.0"></text>
</g>
<g>
<title>VMThread::run() (22 samples, 0.37%)</title><rect x="1185.7" y="483.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.7" y="494.0"></text>
</g>
<g>
<title>VMThread::loop() (22 samples, 0.37%)</title><rect x="1185.7" y="467.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.7" y="478.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.63] (22 samples, 0.37%)</title><rect x="1185.7" y="451.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.7" y="462.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (22 samples, 0.37%)</title><rect x="1185.7" y="435.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.7" y="446.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (22 samples, 0.37%)</title><rect x="1185.7" y="419.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.7" y="430.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (6 samples, 0.10%)</title><rect x="1185.7" y="403.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.7" y="414.0"></text>
</g>
<g>
<title>G1CollectedHeap::post_evacuate_collection_set(G1EvacuationInfo&amp;, G1ParScanThreadStateSet*) (6 samples, 0.10%)</title><rect x="1185.7" y="387.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.7" y="398.0"></text>
</g>
<g>
<title>G1CollectedHeap::process_discovered_references(G1ParScanThreadStateSet*) (5 samples, 0.08%)</title><rect x="1185.9" y="371.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.9" y="382.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_discovered_references(BoolObjectClosure*, OopClosure*, VoidClosure*, AbstractRefProcTaskExecutor*, ReferenceProcessorPhaseTimes*) (5 samples, 0.08%)</title><rect x="1185.9" y="355.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.9" y="366.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_phantom_refs(BoolObjectClosure*, OopClosure*, VoidClosure*, AbstractRefProcTaskExecutor*, ReferenceProcessorPhaseTimes*) (5 samples, 0.08%)</title><rect x="1185.9" y="339.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.9" y="350.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;573558ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)3, 573558ul&gt;::oop_access_barrier(oopDesc*, long) (5 samples, 0.08%)</title><rect x="1185.9" y="323.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.9" y="334.0"></text>
</g>
<g>
<title>G1CollectedHeap::satisfy_failed_allocation(unsigned long, bool*) (16 samples, 0.27%)</title><rect x="1186.8" y="403.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.8" y="414.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_full_collection(bool, bool) [clone .part.278] (16 samples, 0.27%)</title><rect x="1186.8" y="387.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.8" y="398.0"></text>
</g>
<g>
<title>G1FullCollector::collect() (14 samples, 0.23%)</title><rect x="1186.8" y="371.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.8" y="382.0"></text>
</g>
<g>
<title>G1FullCollector::phase1_mark_live_objects() (14 samples, 0.23%)</title><rect x="1186.8" y="355.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.8" y="366.0"></text>
</g>
<g>
<title>G1FullGCReferenceProcessingExecutor::execute(STWGCTimer*, G1FullGCTracer*) (14 samples, 0.23%)</title><rect x="1186.8" y="339.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.8" y="350.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_discovered_references(BoolObjectClosure*, OopClosure*, VoidClosure*, AbstractRefProcTaskExecutor*, ReferenceProcessorPhaseTimes*) (14 samples, 0.23%)</title><rect x="1186.8" y="323.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.8" y="334.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_phantom_refs(BoolObjectClosure*, OopClosure*, VoidClosure*, AbstractRefProcTaskExecutor*, ReferenceProcessorPhaseTimes*) (14 samples, 0.23%)</title><rect x="1186.8" y="307.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.8" y="318.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;573558ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)3, 573558ul&gt;::oop_access_barrier(oopDesc*, long) (12 samples, 0.20%)</title><rect x="1186.8" y="291.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.8" y="302.0"></text>
</g>
<g>
<title>ReferenceProcessor::balance_queues(DiscoveredList*) (2 samples, 0.03%)</title><rect x="1189.2" y="291.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1192.2" y="302.0"></text>
</g>
</g>
<script>
	window.addEventListener('load', function(){ zoom(document.getElementById('myid')) })
</script>
</svg>

